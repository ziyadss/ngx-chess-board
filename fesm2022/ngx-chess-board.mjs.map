{"version":3,"file":"ngx-chess-board.mjs","sources":["../../../projects/ngx-chess-board/src/lib/models/pieces/color.ts","../../../projects/ngx-chess-board/src/lib/models/pieces/piece.ts","../../../projects/ngx-chess-board/src/lib/models/pieces/point.ts","../../../projects/ngx-chess-board/src/lib/models/pieces/rook.ts","../../../projects/ngx-chess-board/src/lib/models/pieces/king.ts","../../../projects/ngx-chess-board/src/lib/models/pieces/bishop.ts","../../../projects/ngx-chess-board/src/lib/models/pieces/knight.ts","../../../projects/ngx-chess-board/src/lib/models/pieces/pawn.ts","../../../projects/ngx-chess-board/src/lib/models/pieces/queen.ts","../../../projects/ngx-chess-board/src/lib/utils/unicode-constants.ts","../../../projects/ngx-chess-board/src/lib/engine/board-state-provider/board-loader/default-pieces-loader.ts","../../../projects/ngx-chess-board/src/lib/engine/board-state-provider/board-loader/notation-processors/fen-loader/default-fen-processor.ts","../../../projects/ngx-chess-board/src/lib/models/move-translation.ts","../../../projects/ngx-chess-board/src/lib/utils/move-utils.ts","../../../projects/ngx-chess-board/src/lib/engine/board-state-provider/board-loader/notation-processors/pgn-loader/default-pgn-processor.ts","../../../projects/ngx-chess-board/src/lib/engine/board-state-provider/board-loader/notation-processors/notation-processor-factory.ts","../../../projects/ngx-chess-board/src/lib/engine/board-state-provider/board-loader/board-loader.ts","../../../projects/ngx-chess-board/src/lib/engine/drawing-tools/draw-point.ts","../../../projects/ngx-chess-board/src/lib/engine/click/click-utils.ts","../../../projects/ngx-chess-board/src/lib/history-move-provider/history-move.ts","../../../projects/ngx-chess-board/src/lib/history-move-provider/history-move-provider.ts","../../../projects/ngx-chess-board/src/lib/utils/constants.ts","../../../projects/ngx-chess-board/src/lib/utils/inputs/piece-icon-input-manager.ts","../../../projects/ngx-chess-board/src/lib/engine/coords/coords-provider.ts","../../../projects/ngx-chess-board/src/lib/engine/drag/end/animation-drag-end-processor.ts","../../../projects/ngx-chess-board/src/lib/engine/drag/end/drag-end-strategy.ts","../../../projects/ngx-chess-board/src/lib/engine/drag/start/animation-drag-start-processor.ts","../../../projects/ngx-chess-board/src/lib/engine/drag/start/drag-start-strategy.ts","../../../projects/ngx-chess-board/src/lib/engine/drawing-tools/colors/default-color-processor.ts","../../../projects/ngx-chess-board/src/lib/engine/drawing-tools/colors/color-strategy.ts","../../../projects/ngx-chess-board/src/lib/engine/drawing-tools/draw-provider.ts","../../../projects/ngx-chess-board/src/lib/engine/pgn/abstract-pgn-processor.ts","../../../projects/ngx-chess-board/src/lib/engine/pgn/default-pgn-processor.ts","../../../projects/ngx-chess-board/src/lib/engine/abstract-engine-facade.ts","../../../projects/ngx-chess-board/src/lib/engine/board-state-provider/board-state/board-state.ts","../../../projects/ngx-chess-board/src/lib/engine/board-state-provider/board-state/board-state-provider.ts","../../../projects/ngx-chess-board/src/lib/engine/drawing-tools/shapes/arrow.ts","../../../projects/ngx-chess-board/src/lib/engine/drawing-tools/shapes/circle.ts","../../../projects/ngx-chess-board/src/lib/engine/piece-decorator/piece-abstract-decorator.ts","../../../projects/ngx-chess-board/src/lib/engine/piece-decorator/available-move-decorator.ts","../../../projects/ngx-chess-board/src/lib/piece-promotion/piece-promotion-resolver.ts","../../../projects/ngx-chess-board/src/lib/utils/inputs/piece-type-input.ts","../../../projects/ngx-chess-board/src/lib/engine/utils/piece-factory.ts","../../../projects/ngx-chess-board/src/lib/engine/engine-facade.ts","../../../projects/ngx-chess-board/src/lib/models/board.ts","../../../projects/ngx-chess-board/src/lib/piece-promotion/piece-promotion-modal/piece-promotion-modal.component.html","../../../projects/ngx-chess-board/src/lib/piece-promotion/piece-promotion-modal/piece-promotion-modal.component.ts","../../../projects/ngx-chess-board/src/lib/ngx-chess-board.component.html","../../../projects/ngx-chess-board/src/lib/ngx-chess-board.component.ts","../../../projects/ngx-chess-board/src/lib/ngx-chess-board.module.ts","../../../projects/ngx-chess-board/src/public-api.ts","../../../projects/ngx-chess-board/src/ngx-chess-board.ts"],"sourcesContent":["export enum Color {\r\n    WHITE,\r\n    BLACK,\r\n}\r\n","import { AbstractPiece } from '../../engine/piece-decorator/abstract-piece';\r\nimport { PieceConstant } from '../../utils/unicode-constants';\r\nimport { Board } from '../board';\r\nimport { Color } from './color';\r\nimport { Point } from './point';\r\n\r\nexport abstract class Piece implements AbstractPiece {\r\n    point: Point;\r\n    color: Color;\r\n    constant: PieceConstant;\r\n    checkPoints: Point[] = [];\r\n    relValue: number;\r\n    board: Board;\r\n\r\n    constructor(\r\n        point: Point,\r\n        color: Color,\r\n        constant: PieceConstant,\r\n        relValue: number,\r\n        board: Board\r\n    ) {\r\n        this.color = color;\r\n        this.constant = constant;\r\n        this.point = point;\r\n        this.relValue = relValue;\r\n        this.board = board;\r\n    }\r\n\r\n    abstract getPossibleMoves(): Point[];\r\n\r\n    abstract getPossibleCaptures(): Point[];\r\n\r\n    abstract getCoveredFields(): Point[]; // zwraca liste punktow ktore sa puste lub istnieje na nich pionek tego samego koloru\r\n}\r\n","export class Point {\r\n    row: number;\r\n    col: number;\r\n\r\n    constructor(row: number, col: number) {\r\n        this.row = row;\r\n        this.col = col;\r\n    }\r\n\r\n    isEqual(that: Point) {\r\n        return that && this.row === that.row && this.col === that.col;\r\n    }\r\n\r\n    hasCoordsEqual(row: number, col: number) {\r\n        return row && col && this.row === row && this.col === col;\r\n    }\r\n\r\n    isInRange(): boolean {\r\n        return this.row >= 0 && this.row <= 7 && this.col >= 0 && this.col <= 7;\r\n    }\r\n\r\n    clone() {\r\n        return new Point(this.row, this.col);\r\n    }\r\n}\r\n","import { PieceConstant } from '../../utils/unicode-constants';\r\nimport { Board } from '../board';\r\nimport { Color } from './color';\r\nimport { King } from './king';\r\nimport { Piece } from './piece';\r\nimport { Point } from './point';\r\n\r\nexport class Rook extends Piece {\r\n    isMovedAlready = false;\r\n\r\n    constructor(\r\n        point: Point,\r\n        color: Color,\r\n        constant: PieceConstant,\r\n        board: Board\r\n    ) {\r\n        super(point, color, constant, 5, board);\r\n    }\r\n\r\n    getPossibleMoves(): Point[] {\r\n        const possiblePoints = [];\r\n\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n\r\n        for (let i = row + 1; i < 8; ++i) {\r\n            // dol\r\n            if (this.board.isFieldEmpty(i, col)) {\r\n                possiblePoints.push(new Point(i, col));\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let i = row - 1; i >= 0; --i) {\r\n            // gora\r\n            if (this.board.isFieldEmpty(i, col)) {\r\n                possiblePoints.push(new Point(i, col));\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let j = col - 1; j >= 0; --j) {\r\n            // lewo\r\n            if (this.board.isFieldEmpty(row, j)) {\r\n                possiblePoints.push(new Point(row, j));\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let j = col + 1; j < 8; ++j) {\r\n            // prawo\r\n            if (this.board.isFieldEmpty(row, j)) {\r\n                possiblePoints.push(new Point(row, j));\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        return possiblePoints;\r\n    }\r\n\r\n    getPossibleCaptures(): Point[] {\r\n        const possiblePoints = [];\r\n\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n\r\n        for (let i = row + 1; i < 8; ++i) {\r\n            // dol\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    i,\r\n                    col,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(i, col));\r\n                break;\r\n            } else {\r\n                if (!this.board.isFieldEmpty(i, col)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = row - 1; i >= 0; --i) {\r\n            // gora\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    i,\r\n                    col,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(i, col));\r\n                break;\r\n            } else {\r\n                if (!this.board.isFieldEmpty(i, col)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let j = col - 1; j >= 0; --j) {\r\n            // lewo\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    row,\r\n                    j,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(row, j));\r\n                break;\r\n            } else {\r\n                if (!this.board.isFieldEmpty(row, j)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let j = col + 1; j < 8; ++j) {\r\n            // prawo\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    row,\r\n                    j,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(row, j));\r\n                break;\r\n            } else {\r\n                if (!this.board.isFieldEmpty(row, j)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return possiblePoints;\r\n    }\r\n\r\n    getCoveredFields(): Point[] {\r\n        const possiblePoints = [];\r\n\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n\r\n        for (let i = row + 1; i < 8; ++i) {\r\n            // dol\r\n            if (this.board.isFieldEmpty(i, col)) {\r\n                possiblePoints.push(new Point(i, col));\r\n            } else {\r\n                if (!(this.board.getPieceByField instanceof King)) {\r\n                    possiblePoints.push(new Point(i, col));\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = row - 1; i >= 0; --i) {\r\n            // gora\r\n            if (this.board.isFieldEmpty(i, col)) {\r\n                possiblePoints.push(new Point(i, col));\r\n            } else {\r\n                if (!(this.board.getPieceByField instanceof King)) {\r\n                    possiblePoints.push(new Point(i, col));\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let j = col - 1; j >= 0; --j) {\r\n            // lewo\r\n            if (this.board.isFieldEmpty(row, j)) {\r\n                possiblePoints.push(new Point(row, j));\r\n            } else {\r\n                if (!(this.board.getPieceByField instanceof King)) {\r\n                    possiblePoints.push(new Point(row, j));\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let j = col + 1; j < 8; ++j) {\r\n            // prawo\r\n            if (this.board.isFieldEmpty(row, j)) {\r\n                possiblePoints.push(new Point(row, j));\r\n            } else {\r\n                if (!(this.board.getPieceByField instanceof King)) {\r\n                    possiblePoints.push(new Point(row, j));\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return possiblePoints;\r\n    }\r\n}\r\n","import { PieceConstant } from '../../utils/unicode-constants';\r\nimport { Board } from '../board';\r\nimport { Color } from './color';\r\nimport { Piece } from './piece';\r\nimport { Point } from './point';\r\nimport { Rook } from './rook';\r\n\r\nexport class King extends Piece {\r\n    castledAlready = false;\r\n    shortCastled = false;\r\n    longCastled = false;\r\n    isMovedAlready;\r\n    isCastling = false;\r\n\r\n    constructor(\r\n        point: Point,\r\n        color: Color,\r\n        constant: PieceConstant,\r\n        board: Board\r\n    ) {\r\n        super(point, color, constant, 0, board);\r\n    }\r\n\r\n    getPossibleMoves(): Point[] {\r\n        const possiblePoints = [];\r\n\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n        // lewo\r\n        if (\r\n            this.board.isFieldEmpty(row, col - 1) &&\r\n            !this.board.isFieldUnderAttack(\r\n                row,\r\n                col - 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row, col - 1));\r\n        }\r\n\r\n        // prawo\r\n        if (\r\n            this.board.isFieldEmpty(row, col + 1) &&\r\n            !this.board.isFieldUnderAttack(\r\n                row,\r\n                col + 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row, col + 1));\r\n        }\r\n\r\n        // dol\r\n        if (\r\n            this.board.isFieldEmpty(row + 1, col) &&\r\n            !this.board.isFieldUnderAttack(\r\n                row + 1,\r\n                col,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row + 1, col));\r\n        }\r\n\r\n        // gora\r\n        if (\r\n            this.board.isFieldEmpty(row - 1, col) &&\r\n            !this.board.isFieldUnderAttack(\r\n                row - 1,\r\n                col,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row - 1, col));\r\n        }\r\n\r\n        // lewo gora\r\n        if (\r\n            this.board.isFieldEmpty(row - 1, col - 1) &&\r\n            !this.board.isFieldUnderAttack(\r\n                row - 1,\r\n                col - 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row - 1, col - 1));\r\n        }\r\n        // prawo gora\r\n        if (\r\n            this.board.isFieldEmpty(row - 1, col + 1) &&\r\n            !this.board.isFieldUnderAttack(\r\n                row - 1,\r\n                col + 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row - 1, col + 1));\r\n        }\r\n\r\n        // lewo dol\r\n        if (\r\n            this.board.isFieldEmpty(row + 1, col - 1) &&\r\n            !this.board.isFieldUnderAttack(\r\n                row + 1,\r\n                col - 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row + 1, col - 1));\r\n        }\r\n        // prawo dol\r\n        if (\r\n            this.board.isFieldEmpty(row + 1, col + 1) &&\r\n            !this.board.isFieldUnderAttack(\r\n                row + 1,\r\n                col + 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row + 1, col + 1));\r\n        }\r\n\r\n        if (!this.isMovedAlready) {\r\n            let longCastlePossible = true;\r\n            for (let i = col - 1; i > 0; --i) {\r\n                if (\r\n                    !this.board.isFieldEmpty(row, i) ||\r\n                    this.board.isFieldUnderAttack(\r\n                        row,\r\n                        i,\r\n                        this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                    )\r\n                ) {\r\n                    longCastlePossible = false;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (longCastlePossible && !this.board.isKingInCheck(\r\n                this.color,\r\n                this.board.pieces\r\n            ) && this.board.getPieceByField(row, 0)) {\r\n                const leftRook = this.board.getPieceByField(row, 0);\r\n                if (leftRook instanceof Rook) {\r\n                    if (!leftRook.isMovedAlready) {\r\n                        possiblePoints.push(new Point(row, col - 2));\r\n                    }\r\n                }\r\n            }\r\n\r\n            let shortCastlePossible = true;\r\n            for (let i = col + 1; i < 7; ++i) {\r\n                if (\r\n                    !this.board.isFieldEmpty(row, i) ||\r\n                    this.board.isFieldUnderAttack(\r\n                        row,\r\n                        i,\r\n                        this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                    )\r\n                ) {\r\n                    shortCastlePossible = false;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (shortCastlePossible && !this.board.isKingInCheck(\r\n                this.color,\r\n                this.board.pieces\r\n            ) && this.board.getPieceByField(row, 7)) {\r\n                const rightRook = this.board.getPieceByField(row, 7);\r\n                if (rightRook instanceof Rook) {\r\n                    if (!rightRook.isMovedAlready) {\r\n                        possiblePoints.push(new Point(row, col + 2));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return possiblePoints;\r\n    }\r\n\r\n    getPossibleCaptures(): Point[] {\r\n        const possiblePoints = [];\r\n\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n\r\n        // lewo\r\n        if (\r\n            this.board.isFieldTakenByEnemy(\r\n                row,\r\n                col - 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            ) &&\r\n            !this.board.isFieldUnderAttack(\r\n                row,\r\n                col - 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row, col - 1));\r\n        }\r\n\r\n        // prawo\r\n        if (\r\n            this.board.isFieldTakenByEnemy(\r\n                row,\r\n                col + 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            ) &&\r\n            !this.board.isFieldUnderAttack(\r\n                row,\r\n                col + 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row, col + 1));\r\n        }\r\n\r\n        // dol\r\n        if (\r\n            this.board.isFieldTakenByEnemy(\r\n                row + 1,\r\n                col,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            ) &&\r\n            !this.board.isFieldUnderAttack(\r\n                row + 1,\r\n                col,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row + 1, col));\r\n        }\r\n\r\n        // gora\r\n        if (\r\n            this.board.isFieldTakenByEnemy(\r\n                row - 1,\r\n                col,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            ) &&\r\n            !this.board.isFieldUnderAttack(\r\n                row - 1,\r\n                col,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row - 1, col));\r\n        }\r\n\r\n        // lewo gora\r\n        if (\r\n            this.board.isFieldTakenByEnemy(\r\n                row - 1,\r\n                col - 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            ) &&\r\n            !this.board.isFieldUnderAttack(\r\n                row - 1,\r\n                col - 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row - 1, col - 1));\r\n        }\r\n        // prawo gora\r\n        if (\r\n            this.board.isFieldTakenByEnemy(\r\n                row - 1,\r\n                col + 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            ) &&\r\n            !this.board.isFieldUnderAttack(\r\n                row - 1,\r\n                col + 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row - 1, col + 1));\r\n        }\r\n\r\n        // lewo dol\r\n        if (\r\n            this.board.isFieldTakenByEnemy(\r\n                row + 1,\r\n                col - 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            ) &&\r\n            !this.board.isFieldUnderAttack(\r\n                row + 1,\r\n                col - 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row + 1, col - 1));\r\n        }\r\n        // prawo dol\r\n        if (\r\n            this.board.isFieldTakenByEnemy(\r\n                row + 1,\r\n                col + 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            ) &&\r\n            !this.board.isFieldUnderAttack(\r\n                row + 1,\r\n                col + 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row + 1, col + 1));\r\n        }\r\n\r\n        return possiblePoints;\r\n    }\r\n\r\n    getCoveredFields(): Point[] {\r\n        const possiblePoints = [];\r\n\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n\r\n        // lewo\r\n        possiblePoints.push(new Point(row, col - 1));\r\n\r\n        // prawo\r\n        possiblePoints.push(new Point(row, col + 1));\r\n\r\n        // dol\r\n        possiblePoints.push(new Point(row + 1, col));\r\n\r\n        // gora\r\n        possiblePoints.push(new Point(row - 1, col));\r\n\r\n        // lewo gora\r\n        possiblePoints.push(new Point(row - 1, col - 1));\r\n\r\n        // prawo gora\r\n        possiblePoints.push(new Point(row - 1, col + 1));\r\n\r\n        // lewo dol\r\n        possiblePoints.push(new Point(row + 1, col - 1));\r\n\r\n        // prawo dol\r\n        possiblePoints.push(new Point(row + 1, col + 1));\r\n\r\n\r\n        return possiblePoints;\r\n    }\r\n}\r\n","import { PieceConstant } from '../../utils/unicode-constants';\r\nimport { Board } from '../board';\r\nimport { Color } from './color';\r\nimport { King } from './king';\r\nimport { Piece } from './piece';\r\nimport { Point } from './point';\r\n\r\nexport class Bishop extends Piece {\r\n    constructor(\r\n        point: Point,\r\n        color: Color,\r\n        constant: PieceConstant,\r\n        board: Board\r\n    ) {\r\n        super(point, color, constant, 3, board);\r\n    }\r\n\r\n    getPossibleMoves(): Point[] {\r\n        const possiblePoints = [];\r\n\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n\r\n        for (let i = row - 1, j = col - 1; i >= 0 && j >= 0; --i, --j) {\r\n            // lewa gorna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let i = row - 1, j = col + 1; i >= 0 && j < 8; --i, ++j) {\r\n            // prawa gorna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let i = row + 1, j = col - 1; i < 8 && j >= 0; ++i, --j) {\r\n            // lewa dolna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let i = row + 1, j = col + 1; i < 8 && j < 8; ++i, ++j) {\r\n            // prawa dolna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        return possiblePoints;\r\n    }\r\n\r\n    getPossibleCaptures() {\r\n        const possiblePoints = [];\r\n\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n\r\n        for (let i = row - 1, j = col - 1; i >= 0 && j >= 0; --i, --j) {\r\n            // lewa gorna przekatna\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    i,\r\n                    j,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(i, j));\r\n                break;\r\n            } else {\r\n                if (!this.board.isFieldEmpty(i, j)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = row - 1, j = col + 1; i >= 0 && j < 8; --i, ++j) {\r\n            // prawa gorna przekatna\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    i,\r\n                    j,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(i, j));\r\n                break;\r\n            } else {\r\n                if (!this.board.isFieldEmpty(i, j)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = row + 1, j = col - 1; i < 8 && j >= 0; ++i, --j) {\r\n            // lewa dolna przekatna\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    i,\r\n                    j,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(i, j));\r\n                break;\r\n            } else {\r\n                if (!this.board.isFieldEmpty(i, j)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = row + 1, j = col + 1; i < 8 && j < 8; ++i, ++j) {\r\n            // prawa dolna przekatna\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    i,\r\n                    j,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(i, j));\r\n                break;\r\n            } else {\r\n                if (!this.board.isFieldEmpty(i, j)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return possiblePoints;\r\n    }\r\n\r\n    getCoveredFields(): Point[] {\r\n        const possiblePoints = [];\r\n\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n\r\n        for (let i = row - 1, j = col - 1; i >= 0 && j >= 0; --i, --j) {\r\n            // lewa gorna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            } else {\r\n                if (!(this.board.getPieceByField(i, j) instanceof King)) {\r\n                    possiblePoints.push(new Point(i, j));\r\n                }\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let i = row - 1, j = col + 1; i >= 0 && j < 8; --i, ++j) {\r\n            // prawa gorna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            } else {\r\n                if (!(this.board.getPieceByField(i, j) instanceof King)) {\r\n                    possiblePoints.push(new Point(i, j));\r\n                }\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let i = row + 1, j = col - 1; i < 8 && j >= 0; ++i, --j) {\r\n            // lewa dolna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            } else {\r\n                if (!(this.board.getPieceByField(i, j) instanceof King)) {\r\n                    possiblePoints.push(new Point(i, j));\r\n                }\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let i = row + 1, j = col + 1; i < 8 && j < 8; ++i, ++j) {\r\n            // prawa dolna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            } else {\r\n                if (!(this.board.getPieceByField(i, j) instanceof King)) {\r\n                    possiblePoints.push(new Point(i, j));\r\n                }\r\n                break;\r\n            }\r\n        }\r\n\r\n        return possiblePoints;\r\n    }\r\n}\r\n","import { PieceConstant } from '../../utils/unicode-constants';\r\nimport { Board } from '../board';\r\nimport { Color } from './color';\r\nimport { Piece } from './piece';\r\nimport { Point } from './point';\r\n\r\nexport class Knight extends Piece {\r\n    isMovedAlready = false;\r\n\r\n    constructor(\r\n        point: Point,\r\n        color: Color,\r\n        constant: PieceConstant,\r\n        board: Board\r\n    ) {\r\n        super(point, color, constant, 3, board);\r\n    }\r\n\r\n    getPossibleMoves(): Point[] {\r\n        const possiblePoints = [];\r\n\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n\r\n        // gora -> lewo\r\n        if (this.board.isFieldEmpty(row - 2, col - 1)) {\r\n            possiblePoints.push(new Point(row - 2, col - 1));\r\n        }\r\n\r\n        // gora -> prawo\r\n        if (this.board.isFieldEmpty(row - 2, col + 1)) {\r\n            possiblePoints.push(new Point(row - 2, col + 1));\r\n        }\r\n\r\n        // lewo -> gora\r\n        if (this.board.isFieldEmpty(row - 1, col - 2)) {\r\n            possiblePoints.push(new Point(row - 1, col - 2));\r\n        }\r\n\r\n        // prawo -> gora\r\n        if (this.board.isFieldEmpty(row - 1, col + 2)) {\r\n            possiblePoints.push(new Point(row - 1, col + 2));\r\n        }\r\n\r\n        // lewo -> dol\r\n        if (this.board.isFieldEmpty(row + 1, col - 2)) {\r\n            possiblePoints.push(new Point(row + 1, col - 2));\r\n        }\r\n\r\n        // prawo -> dol\r\n        if (this.board.isFieldEmpty(row + 1, col + 2)) {\r\n            possiblePoints.push(new Point(row + 1, col + 2));\r\n        }\r\n\r\n        // dol -> lewo\r\n        if (this.board.isFieldEmpty(row + 2, col - 1)) {\r\n            possiblePoints.push(new Point(row + 2, col - 1));\r\n        }\r\n\r\n        // dol -> prawo\r\n        if (this.board.isFieldEmpty(row + 2, col + 1)) {\r\n            possiblePoints.push(new Point(row + 2, col + 1));\r\n        }\r\n\r\n        return possiblePoints;\r\n    }\r\n\r\n    getPossibleCaptures(): Point[] {\r\n        const possiblePoints = [];\r\n\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n\r\n        // gora -> lewo\r\n        if (\r\n            this.board.isFieldTakenByEnemy(\r\n                row - 2,\r\n                col - 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row - 2, col - 1));\r\n        }\r\n\r\n        // gora -> prawo\r\n        if (\r\n            this.board.isFieldTakenByEnemy(\r\n                row - 2,\r\n                col + 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row - 2, col + 1));\r\n        }\r\n\r\n        // lewo -> gora\r\n        if (\r\n            this.board.isFieldTakenByEnemy(\r\n                row - 1,\r\n                col - 2,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row - 1, col - 2));\r\n        }\r\n\r\n        // prawo -> gora\r\n        if (\r\n            this.board.isFieldTakenByEnemy(\r\n                row - 1,\r\n                col + 2,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row - 1, col + 2));\r\n        }\r\n\r\n        // lewo -> dol\r\n        if (\r\n            this.board.isFieldTakenByEnemy(\r\n                row + 1,\r\n                col - 2,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row + 1, col - 2));\r\n        }\r\n\r\n        // prawo -> dol\r\n        if (\r\n            this.board.isFieldTakenByEnemy(\r\n                row + 1,\r\n                col + 2,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row + 1, col + 2));\r\n        }\r\n\r\n        // dol -> lewo\r\n        if (\r\n            this.board.isFieldTakenByEnemy(\r\n                row + 2,\r\n                col - 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row + 2, col - 1));\r\n        }\r\n\r\n        // dol -> prawo\r\n        if (\r\n            this.board.isFieldTakenByEnemy(\r\n                row + 2,\r\n                col + 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row + 2, col + 1));\r\n        }\r\n\r\n        return possiblePoints;\r\n    }\r\n\r\n    getCoveredFields(): Point[] {\r\n        const possiblePoints = [];\r\n\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n\r\n        // gora -> lewo\r\n        possiblePoints.push(new Point(row - 2, col - 1));\r\n\r\n        // gora -> prawo\r\n        possiblePoints.push(new Point(row - 2, col + 1));\r\n\r\n        // lewo -> gora\r\n        possiblePoints.push(new Point(row - 1, col - 2));\r\n\r\n        // prawo -> gora\r\n        possiblePoints.push(new Point(row - 1, col + 2));\r\n\r\n        // lewo -> dol\r\n        possiblePoints.push(new Point(row + 1, col - 2));\r\n\r\n        // prawo -> dol\r\n        possiblePoints.push(new Point(row + 1, col + 2));\r\n\r\n        // dol -> lewo\r\n        possiblePoints.push(new Point(row + 2, col - 1));\r\n\r\n        // dol -> prawo\r\n        possiblePoints.push(new Point(row + 2, col + 1));\r\n\r\n        return possiblePoints;\r\n    }\r\n}\r\n","import { PieceConstant } from '../../utils/unicode-constants';\r\nimport { Board } from '../board';\r\nimport { Color } from './color';\r\nimport { Piece } from './piece';\r\nimport { Point } from './point';\r\n\r\nexport class Pawn extends Piece {\r\n    isMovedAlready = false;\r\n\r\n    constructor(\r\n        point: Point,\r\n        color: Color,\r\n        constant: PieceConstant,\r\n        board: Board\r\n    ) {\r\n        super(point, color, constant, 1, board);\r\n    }\r\n\r\n    getPossibleMoves(): Point[] {\r\n        const possiblePoints = [];\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n        if (\r\n            (!this.board.reverted && this.color === Color.WHITE) ||\r\n            (this.board.reverted && this.color === Color.BLACK)\r\n        ) {\r\n            if (this.board.isFieldEmpty(row - 1, col)) {\r\n                possiblePoints.push(new Point(row - 1, col));\r\n\r\n                if (\r\n                    !this.isMovedAlready &&\r\n                    this.board.isFieldEmpty(row - 2, col)\r\n                ) {\r\n                    possiblePoints.push(new Point(row - 2, col));\r\n                }\r\n            }\r\n        } else {\r\n            if (\r\n                /*!board.isFieldTakenByEnemy(row + 1, col, Color.WHITE) &&*/ this.board.isFieldEmpty(\r\n                    row + 1,\r\n                    col\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(row + 1, col));\r\n\r\n                if (\r\n                    !this.isMovedAlready &&\r\n                    this.board.isFieldEmpty(row + 2, col)\r\n                ) {\r\n                    possiblePoints.push(new Point(row + 2, col));\r\n                }\r\n            }\r\n        }\r\n        return possiblePoints;\r\n    }\r\n\r\n    getPossibleCaptures(): Point[] {\r\n        const possiblePoints = [];\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n\r\n        if (\r\n            (!this.board.reverted && this.color === Color.WHITE) ||\r\n            (this.board.reverted && this.color === Color.BLACK)\r\n        ) {\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    row - 1,\r\n                    col - 1,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(row - 1, col - 1));\r\n            }\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    row - 1,\r\n                    col + 1,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(row - 1, col + 1));\r\n            }\r\n        } else {\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    row + 1,\r\n                    col - 1,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(row + 1, col - 1));\r\n            }\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    row + 1,\r\n                    col + 1,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(row + 1, col + 1));\r\n            }\r\n        }\r\n\r\n        if (\r\n            this.board.enPassantPoint &&\r\n            this.board.enPassantPiece.color ===\r\n                (this.color === Color.WHITE ? Color.BLACK : Color.WHITE)\r\n        ) {\r\n            if (\r\n                row === this.board.enPassantPiece.point.row &&\r\n                Math.abs(this.board.enPassantPiece.point.col - col) === 1\r\n            ) {\r\n                possiblePoints.push(this.board.enPassantPoint);\r\n            }\r\n        }\r\n\r\n        return possiblePoints;\r\n    }\r\n\r\n    getCoveredFields(): Point[] {\r\n        const possiblePoints = [];\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n\r\n        if (\r\n            (!this.board.reverted && this.color === Color.WHITE) ||\r\n            (this.board.reverted && this.color === Color.BLACK)\r\n        ) {\r\n            possiblePoints.push(new Point(row - 1, col - 1));\r\n\r\n            possiblePoints.push(new Point(row - 1, col + 1));\r\n        } else {\r\n            possiblePoints.push(new Point(row + 1, col - 1));\r\n\r\n            possiblePoints.push(new Point(row + 1, col + 1));\r\n        }\r\n\r\n        return possiblePoints;\r\n    }\r\n}\r\n","import { PieceConstant } from '../../utils/unicode-constants';\r\nimport { Board } from '../board';\r\nimport { Color } from './color';\r\nimport { King } from './king';\r\nimport { Piece } from './piece';\r\nimport { Point } from './point';\r\n\r\nexport class Queen extends Piece {\r\n    constructor(\r\n        point: Point,\r\n        color: Color,\r\n        constant: PieceConstant,\r\n        board: Board\r\n    ) {\r\n        super(point, color, constant, 9, board);\r\n    }\r\n\r\n    getPossibleMoves(): Point[] {\r\n        const possiblePoints = [];\r\n\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n\r\n        for (let i = row - 1, j = col - 1; i >= 0 && j >= 0; --i, --j) {\r\n            // lewa gorna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let i = row - 1, j = col + 1; i >= 0 && j < 8; --i, ++j) {\r\n            // prawa gorna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let i = row + 1, j = col - 1; i < 8 && j >= 0; ++i, --j) {\r\n            // lewa dolna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let i = row + 1, j = col + 1; i < 8 && j < 8; ++i, ++j) {\r\n            // prawa dolna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let i = row + 1; i < 8; ++i) {\r\n            // dol\r\n            if (this.board.isFieldEmpty(i, col)) {\r\n                possiblePoints.push(new Point(i, col));\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let i = row - 1; i >= 0; --i) {\r\n            // gora\r\n            if (this.board.isFieldEmpty(i, col)) {\r\n                possiblePoints.push(new Point(i, col));\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let j = col - 1; j >= 0; --j) {\r\n            // lewo\r\n            if (this.board.isFieldEmpty(row, j)) {\r\n                possiblePoints.push(new Point(row, j));\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let j = col + 1; j < 8; ++j) {\r\n            // prawo\r\n            if (this.board.isFieldEmpty(row, j)) {\r\n                possiblePoints.push(new Point(row, j));\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        return possiblePoints;\r\n    }\r\n\r\n    getPossibleCaptures(): Point[] {\r\n        const possiblePoints = [];\r\n\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n\r\n        for (let i = row - 1, j = col - 1; i >= 0 && j >= 0; --i, --j) {\r\n            // lewa gorna przekatna\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    i,\r\n                    j,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(i, j));\r\n                break;\r\n            } else {\r\n                if (!this.board.isFieldEmpty(i, j)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = row - 1, j = col + 1; i >= 0 && j < 8; --i, ++j) {\r\n            // prawa gorna przekatna\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    i,\r\n                    j,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(i, j));\r\n                break;\r\n            } else {\r\n                if (!this.board.isFieldEmpty(i, j)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = row + 1, j = col - 1; i < 8 && j >= 0; ++i, --j) {\r\n            // lewa dolna przekatna\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    i,\r\n                    j,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(i, j));\r\n                break;\r\n            } else {\r\n                if (!this.board.isFieldEmpty(i, j)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = row + 1, j = col + 1; i < 8 && j < 8; ++i, ++j) {\r\n            // prawa dolna przekatna\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    i,\r\n                    j,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(i, j));\r\n                break;\r\n            } else {\r\n                if (!this.board.isFieldEmpty(i, j)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        for (let i = row + 1; i < 8; ++i) {\r\n            // dol\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    i,\r\n                    col,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(i, col));\r\n                break;\r\n            } else {\r\n                if (!this.board.isFieldEmpty(i, col)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = row - 1; i >= 0; --i) {\r\n            // gora\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    i,\r\n                    col,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(i, col));\r\n                break;\r\n            } else {\r\n                if (!this.board.isFieldEmpty(i, col)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let j = col - 1; j >= 0; --j) {\r\n            // lewo\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    row,\r\n                    j,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(row, j));\r\n                break;\r\n            } else {\r\n                if (!this.board.isFieldEmpty(row, j)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let j = col + 1; j < 8; ++j) {\r\n            // prawo\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    row,\r\n                    j,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(row, j));\r\n                break;\r\n            } else {\r\n                if (!this.board.isFieldEmpty(row, j)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return possiblePoints;\r\n    }\r\n\r\n    getCoveredFields(): Point[] {\r\n        const possiblePoints = [];\r\n\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n\r\n        for (let i = row + 1; i < 8; ++i) {\r\n            // dol\r\n            if (this.board.isFieldEmpty(i, col)) {\r\n                possiblePoints.push(new Point(i, col));\r\n            } else {\r\n                if (!(this.board.getPieceByField(i, col) instanceof King)) {\r\n                    possiblePoints.push(new Point(i, col));\r\n                }\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let i = row - 1; i >= 0; --i) {\r\n            // gora\r\n            if (this.board.isFieldEmpty(i, col)) {\r\n                possiblePoints.push(new Point(i, col));\r\n            } else {\r\n                if (!(this.board.getPieceByField(i, col) instanceof King)) {\r\n                    possiblePoints.push(new Point(i, col));\r\n                }\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let j = col - 1; j >= 0; --j) {\r\n            // lewo\r\n            if (this.board.isFieldEmpty(row, j)) {\r\n                possiblePoints.push(new Point(row, j));\r\n            } else {\r\n                if (!(this.board.getPieceByField(row, j) instanceof King)) {\r\n                    possiblePoints.push(new Point(row, j));\r\n                }\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let j = col + 1; j < 8; ++j) {\r\n            // prawo\r\n            if (this.board.isFieldEmpty(row, j)) {\r\n                possiblePoints.push(new Point(row, j));\r\n            } else {\r\n                if (!(this.board.getPieceByField(row, j) instanceof King)) {\r\n                    possiblePoints.push(new Point(row, j));\r\n                }\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let i = row - 1, j = col - 1; i >= 0 && j >= 0; --i, --j) {\r\n            // lewa gorna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            } else {\r\n                if (!(this.board.getPieceByField(i, j) instanceof King)) {\r\n                    possiblePoints.push(new Point(i, j));\r\n                }\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let i = row - 1, j = col + 1; i >= 0 && j < 8; --i, ++j) {\r\n            // prawa gorna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            } else {\r\n                if (!(this.board.getPieceByField(i, j) instanceof King)) {\r\n                    possiblePoints.push(new Point(i, j));\r\n                }\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let i = row + 1, j = col - 1; i < 8 && j >= 0; ++i, --j) {\r\n            // lewa dolna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            } else {\r\n                if (!(this.board.getPieceByField(i, j) instanceof King)) {\r\n                    possiblePoints.push(new Point(i, j));\r\n                }\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let i = row + 1, j = col + 1; i < 8 && j < 8; ++i, ++j) {\r\n            // prawa dolna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            } else {\r\n                if (!(this.board.getPieceByField(i, j) instanceof King)) {\r\n                    possiblePoints.push(new Point(i, j));\r\n                }\r\n                break;\r\n            }\r\n        }\r\n\r\n        return possiblePoints;\r\n    }\r\n}\r\n","export interface PieceConstant {\r\n    name: string;\r\n    icon: string;\r\n}\r\n\r\nexport const UnicodeConstants = {\r\n    WHITE_KING: { name: 'King', icon: '&#x2654;' },\r\n    WHITE_QUEEN: { name: 'Queen', icon: '&#x2655;' },\r\n    WHITE_KNIGHT: { name: 'Knight', icon: '&#x2658' },\r\n    WHITE_ROOK: { name: 'Rook', icon: '&#x2656' },\r\n    WHITE_PAWN: { name: 'Pawn', icon: '&#x2659' },\r\n    WHITE_BISHOP: { name: 'Bishop', icon: '&#x2657' },\r\n\r\n    BLACK_KING: { name: 'King', icon: '&#x265A' },\r\n    BLACK_QUEEN: { name: 'Queen', icon: '&#x265B' },\r\n    BLACK_KNIGHT: { name: 'Knight', icon: '&#x265E' },\r\n    BLACK_ROOK: { name: 'Rook', icon: '&#x265C' },\r\n    BLACK_PAWN: { name: 'Pawn', icon: '&#x265F' },\r\n    BLACK_BISHOP: { name: 'Bishop', icon: '&#x265D' },\r\n};\r\n","import { Board } from '../../../models/board';\r\nimport { Bishop } from '../../../models/pieces/bishop';\r\nimport { Color } from '../../../models/pieces/color';\r\nimport { King } from '../../../models/pieces/king';\r\nimport { Knight } from '../../../models/pieces/knight';\r\nimport { Pawn } from '../../../models/pieces/pawn';\r\nimport { Point } from '../../../models/pieces/point';\r\nimport { Queen } from '../../../models/pieces/queen';\r\nimport { Rook } from '../../../models/pieces/rook';\r\nimport { UnicodeConstants } from '../../../utils/unicode-constants';\r\n\r\nexport class DefaultPiecesLoader {\r\n\r\n    static loadDefaultPieces(board: Board) {\r\n        board.pieces = [];\r\n        // piony czarne\r\n        for (let i = 0; i < 8; ++i) {\r\n            board.pieces.push(new Pawn(\r\n                new Point(1, i),\r\n                Color.BLACK,\r\n                UnicodeConstants.BLACK_PAWN,\r\n                board\r\n            ));\r\n        }\r\n        board.pieces.push(new Rook(\r\n            new Point(0, 0),\r\n            Color.BLACK,\r\n            UnicodeConstants.BLACK_ROOK,\r\n            board\r\n        ));\r\n        board.pieces.push(new Knight(\r\n            new Point(0, 1),\r\n            Color.BLACK,\r\n            UnicodeConstants.BLACK_KNIGHT,\r\n            board\r\n        ));\r\n        board.pieces.push(new Bishop(\r\n            new Point(0, 2),\r\n            Color.BLACK,\r\n            UnicodeConstants.BLACK_BISHOP,\r\n            board\r\n        ));\r\n        board.pieces.push(new Queen(\r\n            new Point(0, 3),\r\n            Color.BLACK,\r\n            UnicodeConstants.BLACK_QUEEN,\r\n            board\r\n        ));\r\n        board.pieces.push(new King(\r\n            new Point(0, 4),\r\n            Color.BLACK,\r\n            UnicodeConstants.BLACK_KING,\r\n            board\r\n        ));\r\n        board.pieces.push(new Bishop(\r\n            new Point(0, 5),\r\n            Color.BLACK,\r\n            UnicodeConstants.BLACK_BISHOP,\r\n            board\r\n        ));\r\n        board.pieces.push(new Knight(\r\n            new Point(0, 6),\r\n            Color.BLACK,\r\n            UnicodeConstants.BLACK_KNIGHT,\r\n            board\r\n        ));\r\n        board.pieces.push(new Rook(\r\n            new Point(0, 7),\r\n            Color.BLACK,\r\n            UnicodeConstants.BLACK_ROOK,\r\n            board\r\n        ));\r\n\r\n        // piony biale\r\n        for (let i = 0; i < 8; ++i) {\r\n            board.pieces.push(new Pawn(\r\n                new Point(6, i),\r\n                Color.WHITE,\r\n                UnicodeConstants.WHITE_PAWN,\r\n                board\r\n            ));\r\n        }\r\n        board.pieces.push(new Rook(\r\n            new Point(7, 0),\r\n            Color.WHITE,\r\n            UnicodeConstants.WHITE_ROOK,\r\n            board\r\n        ));\r\n        board.pieces.push(new Knight(\r\n            new Point(7, 1),\r\n            Color.WHITE,\r\n            UnicodeConstants.WHITE_KNIGHT,\r\n            board\r\n        ));\r\n        board.pieces.push(new Bishop(\r\n            new Point(7, 2),\r\n            Color.WHITE,\r\n            UnicodeConstants.WHITE_BISHOP,\r\n            board\r\n        ));\r\n        board.pieces.push(new Queen(\r\n            new Point(7, 3),\r\n            Color.WHITE,\r\n            UnicodeConstants.WHITE_QUEEN,\r\n            board\r\n        ));\r\n        board.pieces.push(new King(\r\n            new Point(7, 4),\r\n            Color.WHITE,\r\n            UnicodeConstants.WHITE_KING,\r\n            board\r\n        ));\r\n        board.pieces.push(new Bishop(\r\n            new Point(7, 5),\r\n            Color.WHITE,\r\n            UnicodeConstants.WHITE_BISHOP,\r\n            board\r\n        ));\r\n        board.pieces.push(new Knight(\r\n            new Point(7, 6),\r\n            Color.WHITE,\r\n            UnicodeConstants.WHITE_KNIGHT,\r\n            board\r\n        ));\r\n        board.pieces.push(new Rook(\r\n            new Point(7, 7),\r\n            Color.WHITE,\r\n            UnicodeConstants.WHITE_ROOK,\r\n            board\r\n        ));\r\n\r\n        board.calculateFEN();\r\n\r\n    }\r\n\r\n}\r\n","import { Board } from '../../../../../models/board';\r\nimport { Bishop } from '../../../../../models/pieces/bishop';\r\nimport { Color } from '../../../../../models/pieces/color';\r\nimport { King } from '../../../../../models/pieces/king';\r\nimport { Knight } from '../../../../../models/pieces/knight';\r\nimport { Pawn } from '../../../../../models/pieces/pawn';\r\nimport { Point } from '../../../../../models/pieces/point';\r\nimport { Queen } from '../../../../../models/pieces/queen';\r\nimport { Rook } from '../../../../../models/pieces/rook';\r\nimport { UnicodeConstants } from '../../../../../utils/unicode-constants';\r\nimport { AbstractEngineFacade } from '../../../../abstract-engine-facade';\r\nimport { NotationProcessor } from '../notation-processor';\r\n\r\nexport class DefaultFenProcessor implements NotationProcessor {\r\n\r\n    public process(notation: string, engineFacade: AbstractEngineFacade): void {\r\n        let fen = notation;\r\n        if (notation) {\r\n            engineFacade.board.reverted = false;\r\n            engineFacade.board.pieces = [];\r\n            const split = fen.split('/');\r\n            for (let i = 0; i < 8; ++i) {\r\n                let pointer = 0;\r\n                for (let j = 0; j < split[i].split(' ')[0].length; ++j) {\r\n                    const chunk = split[i].charAt(j);\r\n                    if (chunk.match(/[0-9]/)) {\r\n                        pointer += Number(chunk);\r\n                    } else {\r\n                        switch (chunk) {\r\n                            case 'r':\r\n                                engineFacade.board.pieces.push(\r\n                                    new Rook(\r\n                                        new Point(i, pointer),\r\n                                        Color.BLACK,\r\n                                        UnicodeConstants.BLACK_ROOK,\r\n                                        engineFacade.board\r\n                                    )\r\n                                );\r\n                                break;\r\n                            case 'n':\r\n                                engineFacade.board.pieces.push(\r\n                                    new Knight(\r\n                                        new Point(i, pointer),\r\n                                        Color.BLACK,\r\n                                        UnicodeConstants.BLACK_KNIGHT,\r\n                                        engineFacade.board\r\n                                    )\r\n                                );\r\n\r\n                                break;\r\n                            case 'b':\r\n                                engineFacade.board.pieces.push(\r\n                                    new Bishop(\r\n                                        new Point(i, pointer),\r\n                                        Color.BLACK,\r\n                                        UnicodeConstants.BLACK_BISHOP,\r\n                                        engineFacade.board\r\n                                    )\r\n                                );\r\n                                break;\r\n                            case 'q':\r\n                                engineFacade.board.pieces.push(\r\n                                    new Queen(\r\n                                        new Point(i, pointer),\r\n                                        Color.BLACK,\r\n                                        UnicodeConstants.BLACK_QUEEN,\r\n                                        engineFacade.board\r\n                                    )\r\n                                );\r\n                                break;\r\n                            case 'k':\r\n                                engineFacade.board.pieces.push(\r\n                                    new King(\r\n                                        new Point(i, pointer),\r\n                                        Color.BLACK,\r\n                                        UnicodeConstants.BLACK_KING,\r\n                                        engineFacade.board\r\n                                    )\r\n                                );\r\n                                break;\r\n                            case 'p': {\r\n                                const pawn = new Pawn(\r\n                                    new Point(i, pointer),\r\n                                    Color.BLACK,\r\n                                    UnicodeConstants.BLACK_PAWN,\r\n                                    engineFacade.board\r\n                                );\r\n                                if (\r\n                                    (pawn.color === Color.BLACK && pawn.point.row !== 1) ||\r\n                                    (pawn.color === Color.WHITE && pawn.point.row !== 6)\r\n                                ) {\r\n                                    pawn.isMovedAlready = true;\r\n                                }\r\n                                engineFacade.board.pieces.push(pawn);\r\n                                break;\r\n                            }\r\n                            case 'R':\r\n                                engineFacade.board.pieces.push(\r\n                                    new Rook(\r\n                                        new Point(i, pointer),\r\n                                        Color.WHITE,\r\n                                        UnicodeConstants.WHITE_ROOK,\r\n                                        engineFacade.board\r\n                                    )\r\n                                );\r\n\r\n                                break;\r\n                            case 'N':\r\n                                engineFacade.board.pieces.push(\r\n                                    new Knight(\r\n                                        new Point(i, pointer),\r\n                                        Color.WHITE,\r\n                                        UnicodeConstants.WHITE_KNIGHT,\r\n                                        engineFacade.board\r\n                                    )\r\n                                );\r\n                                break;\r\n\r\n                            case 'B':\r\n                                engineFacade.board.pieces.push(\r\n                                    new Bishop(\r\n                                        new Point(i, pointer),\r\n                                        Color.WHITE,\r\n                                        UnicodeConstants.WHITE_BISHOP,\r\n                                        engineFacade.board\r\n                                    )\r\n                                );\r\n                                break;\r\n\r\n                            case 'Q':\r\n                                engineFacade.board.pieces.push(\r\n                                    new Queen(\r\n                                        new Point(i, pointer),\r\n                                        Color.WHITE,\r\n                                        UnicodeConstants.WHITE_QUEEN,\r\n                                        engineFacade.board\r\n                                    )\r\n                                );\r\n                                break;\r\n\r\n                            case 'K':\r\n                                engineFacade.board.pieces.push(\r\n                                    new King(\r\n                                        new Point(i, pointer),\r\n                                        Color.WHITE,\r\n                                        UnicodeConstants.WHITE_KING,\r\n                                        engineFacade.board\r\n                                    )\r\n                                );\r\n                                break;\r\n\r\n                            case 'P': {\r\n                                const pawn = new Pawn(\r\n                                    new Point(i, pointer),\r\n                                    Color.WHITE,\r\n                                    UnicodeConstants.WHITE_PAWN,\r\n                                    engineFacade.board\r\n                                );\r\n                                if (\r\n                                    (pawn.color === Color.BLACK && pawn.point.row !== 1) ||\r\n                                    (pawn.color === Color.WHITE && pawn.point.row !== 6)\r\n                                ) {\r\n                                    pawn.isMovedAlready = true;\r\n                                }\r\n                                engineFacade.board.pieces.push(pawn);\r\n                                break;\r\n                            }\r\n                        }\r\n                        ++pointer;\r\n                    }\r\n                }\r\n            }\r\n\r\n            this.setCurrentPlayer(engineFacade.board, fen);\r\n            this.setCastles(engineFacade.board, fen);\r\n            this.setEnPassant(fen);\r\n            this.setFullMoveCount(fen);\r\n            engineFacade.board.fen = fen;\r\n        } else {\r\n            throw Error('Incorrect FEN provided');\r\n        }\r\n    }\r\n\r\n\r\n    private setCurrentPlayer(board: Board, fen: string) {\r\n        if (fen) {\r\n            const split = fen.split(' ');\r\n            board.currentWhitePlayer = split[1] === 'w';\r\n        }\r\n    }\r\n\r\n    private setCastles(board: Board, fen: string) {\r\n        if (fen) {\r\n            const split = fen.split(' ');\r\n            const castleChunk = split[2];\r\n\r\n            if (!castleChunk.includes('K')) {\r\n                this.setRookAlreadyMoved(board, Color.WHITE, 7);\r\n            }\r\n\r\n            if (!castleChunk.includes('Q')) {\r\n                this.setRookAlreadyMoved(board, Color.WHITE, 0);\r\n            }\r\n\r\n            if (!castleChunk.includes('k')) {\r\n                this.setRookAlreadyMoved(board, Color.BLACK, 7);\r\n            }\r\n\r\n            if (!castleChunk.includes('q')) {\r\n                this.setRookAlreadyMoved(board, Color.BLACK, 0);\r\n            }\r\n        }\r\n    }\r\n\r\n    private setFullMoveCount(fen: string) {}\r\n\r\n    private setEnPassant(fen: string) {\r\n        if (fen) {\r\n            const split = fen.split(' ');\r\n            const enPassantPoint = split[3];\r\n\r\n            if (enPassantPoint === '-') {\r\n                return;\r\n            }\r\n\r\n            // if()\r\n        }\r\n    }\r\n\r\n    private setRookAlreadyMoved(board: Board, color: Color, col: number) {\r\n        const rook = board.pieces.find(\r\n            (piece) => piece.color === color && piece instanceof Rook && piece.point.col === col\r\n        ) as Rook;\r\n\r\n        if (rook) {\r\n            rook.isMovedAlready = true;\r\n        }\r\n    }\r\n\r\n}\r\n","export class MoveTranslation {\r\n    private _xAxis: number;\r\n    private _yAxis: number;\r\n    private _reverted: boolean;\r\n\r\n    constructor(xAxis: number, yAxis: number, reverted: boolean) {\r\n        this._xAxis = xAxis;\r\n        this._yAxis = yAxis;\r\n        this._reverted = reverted;\r\n    }\r\n\r\n    get xAxis(): number {\r\n        return this._xAxis;\r\n    }\r\n\r\n    set xAxis(value: number) {\r\n        this._xAxis = value;\r\n    }\r\n\r\n    get yAxis(): number {\r\n        return this._yAxis;\r\n    }\r\n\r\n    set yAxis(value: number) {\r\n        this._yAxis = value;\r\n    }\r\n\r\n    get reverted(): boolean {\r\n        return this._reverted;\r\n    }\r\n\r\n    set reverted(value: boolean) {\r\n        this._reverted = value;\r\n    }\r\n}\r\n","import { Board } from '../models/board';\r\nimport { Bishop } from '../models/pieces/bishop';\r\nimport { Color } from '../models/pieces/color';\r\nimport { King } from '../models/pieces/king';\r\nimport { Knight } from '../models/pieces/knight';\r\nimport { Pawn } from '../models/pieces/pawn';\r\nimport { Piece } from '../models/pieces/piece';\r\nimport { Point } from '../models/pieces/point';\r\nimport { MoveTranslation } from '../models/move-translation';\r\nimport { Queen } from '../models/pieces/queen';\r\nimport { Rook } from '../models/pieces/rook';\r\n\r\nexport class MoveUtils {\r\n    public static willMoveCauseCheck(\r\n        currentColor: Color,\r\n        row: number,\r\n        col: number,\r\n        destRow: number,\r\n        destCol: number,\r\n        board: Board\r\n    ) {\r\n        const srcPiece = board.getPieceByField(row, col);\r\n        const destPiece = board.getPieceByField(destRow, destCol);\r\n\r\n        if (srcPiece) {\r\n            srcPiece.point.row = destRow;\r\n            srcPiece.point.col = destCol;\r\n        }\r\n\r\n        if (destPiece) {\r\n            board.pieces = board.pieces.filter((piece) => piece !== destPiece);\r\n        }\r\n        const isBound = board.isKingInCheck(currentColor, board.pieces);\r\n\r\n        if (srcPiece) {\r\n            srcPiece.point.col = col;\r\n            srcPiece.point.row = row;\r\n        }\r\n\r\n        if (destPiece) {\r\n            board.pieces.push(destPiece);\r\n        }\r\n\r\n        return isBound;\r\n    }\r\n\r\n    public static format(\r\n        sourcePoint: Point,\r\n        destPoint: Point,\r\n        reverted: boolean\r\n    ) {\r\n        if (reverted) {\r\n            const sourceX = 104 - sourcePoint.col;\r\n            const destX = 104 - destPoint.col;\r\n            return (\r\n                String.fromCharCode(sourceX) +\r\n                (sourcePoint.row + 1) +\r\n                String.fromCharCode(destX) +\r\n                (destPoint.row + 1)\r\n            );\r\n        } else {\r\n            const incrementX = 97;\r\n            return (\r\n                String.fromCharCode(sourcePoint.col + incrementX) +\r\n                (Math.abs(sourcePoint.row - 7) + 1) +\r\n                String.fromCharCode(destPoint.col + incrementX) +\r\n                (Math.abs(destPoint.row - 7) + 1)\r\n            );\r\n        }\r\n    }\r\n\r\n    public static translateCoordsToIndex(coords: string, reverted: boolean) {\r\n        let xAxis: number;\r\n        let yAxis: number;\r\n        if (reverted) {\r\n            xAxis = 104 - coords.charCodeAt(0);\r\n            yAxis = +coords.charAt(1) - 1;\r\n        } else {\r\n            xAxis = coords.charCodeAt(0) - 97;\r\n            yAxis = Math.abs(+coords.charAt(1) - 8);\r\n        }\r\n\r\n        return new MoveTranslation(xAxis, yAxis, reverted);\r\n    }\r\n\r\n    public static findPieceByPossibleMovesContaining(\r\n        coords: string,\r\n        board: Board,\r\n        color: Color\r\n    ): Piece[] {\r\n        let indexes = this.translateCoordsToIndex(coords, board.reverted);\r\n        let destPoint = new Point(indexes.yAxis, indexes.xAxis);\r\n        let foundPieces = [];\r\n\r\n        for (let piece of board.pieces.filter(piece => piece.color === color)) {\r\n            for (let point of piece.getPossibleMoves()) {\r\n                if (!MoveUtils.willMoveCauseCheck(\r\n                    piece.color,\r\n                    piece.point.row,\r\n                    piece.point.col,\r\n                    indexes.yAxis,\r\n                    indexes.xAxis,\r\n                    board\r\n                ) && point.isEqual(destPoint)) {\r\n                    foundPieces.push(piece);\r\n                }\r\n            }\r\n        }\r\n        return foundPieces;\r\n    }\r\n\r\n    public static findPieceByPossibleCapturesContaining(\r\n        coords: string,\r\n        board: Board,\r\n        color: Color\r\n    ): Piece[] {\r\n        let indexes = this.translateCoordsToIndex(coords, board.reverted);\r\n        let destPoint = new Point(indexes.yAxis, indexes.xAxis);\r\n        let foundPieces = [];\r\n        for (let piece of board.pieces.filter(piece => piece.color === color)) {\r\n            for (let point of piece.getPossibleCaptures()) {\r\n                if (!MoveUtils.willMoveCauseCheck(\r\n                    piece.color,\r\n                    piece.point.row,\r\n                    piece.point.col,\r\n                    indexes.yAxis,\r\n                    indexes.xAxis,\r\n                    board\r\n                ) && point.isEqual(destPoint)) {\r\n                    foundPieces.push(piece);\r\n                }\r\n            }\r\n        }\r\n\r\n        return foundPieces;\r\n    }\r\n\r\n    public static formatSingle(point: Point, reverted: boolean): string {\r\n        if (reverted) {\r\n            const sourceX = 104 - point.col;\r\n            return (\r\n                String.fromCharCode(sourceX) +\r\n                (point.row + 1)\r\n            );\r\n        } else {\r\n            const incrementX = 97;\r\n            return (\r\n                String.fromCharCode(point.col + incrementX) +\r\n                (Math.abs(point.row - 7) + 1)\r\n            );\r\n        }\r\n    }\r\n\r\n    public static getFirstLetterPiece(piece: Piece): string {\r\n        if (piece instanceof Pawn) {\r\n            return 'P';\r\n        } else {\r\n            if (piece instanceof Knight) {\r\n                return 'N';\r\n            } else {\r\n                if (piece instanceof Bishop) {\r\n                    return 'B';\r\n                } else {\r\n                    if (piece instanceof Rook) {\r\n                        return 'R';\r\n                    } else {\r\n                        if (piece instanceof King) {\r\n                            return 'K';\r\n                        } else {\r\n                            if (piece instanceof Queen) {\r\n                                return 'Q';\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return '';\r\n    }\r\n\r\n    static reverse(board: Board, row: number) {\r\n        return board.reverted\r\n            ? row + 1\r\n            : Math.abs(row - 7) + 1;\r\n    }\r\n\r\n    static formatCol(board: Board, col: number): string {\r\n        return board.reverted\r\n            ? String.fromCharCode(104 - col)\r\n            : String.fromCharCode(97 + col);\r\n    }\r\n}\r\n","import { Board } from '../../../../../models/board';\r\nimport { Bishop } from '../../../../../models/pieces/bishop';\r\nimport { Color } from '../../../../../models/pieces/color';\r\nimport { King } from '../../../../../models/pieces/king';\r\nimport { Knight } from '../../../../../models/pieces/knight';\r\nimport { Pawn } from '../../../../../models/pieces/pawn';\r\nimport { Piece } from '../../../../../models/pieces/piece';\r\nimport { Point } from '../../../../../models/pieces/point';\r\nimport { Queen } from '../../../../../models/pieces/queen';\r\nimport { Rook } from '../../../../../models/pieces/rook';\r\nimport { MoveUtils } from '../../../../../utils/move-utils';\r\nimport { AbstractEngineFacade } from '../../../../abstract-engine-facade';\r\nimport { DefaultPiecesLoader } from '../../default-pieces-loader';\r\nimport { NotationProcessor } from '../notation-processor';\r\n\r\nexport class DefaultPgnProcessor implements NotationProcessor {\r\n\r\n    public process(notation: string, engineFacade: AbstractEngineFacade): void {\r\n        if (notation) {\r\n            engineFacade.board.reverted = false;\r\n            engineFacade.board.pieces = [];\r\n            engineFacade.reset();\r\n            DefaultPiecesLoader.loadDefaultPieces(engineFacade.board);\r\n            let moves = this.extractMoves(notation);\r\n            let counter = -1;\r\n            for (let move of moves) {\r\n                ++counter;\r\n                move = move.replace(/[+#]/g, '');\r\n                let promotionIndex = '';\r\n\r\n                if (move.includes('=')) {\r\n                    promotionIndex = this.resolvePromotion(move.substring(move.length - 1));\r\n                    move = move.substring(0, move.length - 2);\r\n                }\r\n\r\n                let color = (counter === 0 || counter % 2 === 0)\r\n                    ? Color.WHITE\r\n                    : Color.BLACK;\r\n\r\n                if (/^[a-z]\\d$/g.test(move)) { // zwykly ruch na wolne pole e4\r\n                    let piece = MoveUtils.findPieceByPossibleMovesContaining(\r\n                        move,\r\n                        engineFacade.board,\r\n                        color\r\n                    ).find(piece => piece instanceof Pawn);\r\n\r\n                    // en passant check\r\n                    if (!piece) {\r\n                        piece = MoveUtils.findPieceByPossibleCapturesContaining(\r\n                            move, engineFacade.board, color\r\n                        ).find(piece => piece instanceof Pawn);\r\n                    }\r\n\r\n                    // if piece is found for sure\r\n                    if (piece) {\r\n                        engineFacade.move(MoveUtils.formatSingle(\r\n                            piece.point,\r\n                            false\r\n                        ) + move + promotionIndex);\r\n                    }\r\n                } else {\r\n                    if (/^[A-Z][a-h]\\d$/g.test(move)) {// jezeli ma wielka litere, czyli trzeba odszukac ktora figura Nf3\r\n                        let pieces = MoveUtils.findPieceByPossibleMovesContaining(\r\n                            move.substring(1),\r\n                            engineFacade.board,\r\n                            color\r\n                        );\r\n                        let piece = pieces.find(piece => this.resolvePieceByFirstChar(\r\n                            move.charAt(0),\r\n                            piece\r\n                        ));\r\n                        if (piece) {\r\n                            engineFacade.move(MoveUtils.formatSingle(\r\n                                piece.point,\r\n                                false\r\n                            ) + move.substring(1) + promotionIndex);\r\n                        } else {\r\n                        }\r\n                    } else {\r\n                        if ('O-O' === move) {\r\n                            engineFacade.move(color === Color.WHITE ? 'e1g1' : 'e8g8');\r\n                        } else {\r\n                            if (/^[a-z]x[a-z]\\d$/g.test(move)) { //exd5\r\n                                let pieces = MoveUtils.findPieceByPossibleCapturesContaining(\r\n                                    move.substring(move.indexOf('x') + 1),\r\n                                    engineFacade.board,\r\n                                    color\r\n                                ).filter(piece => piece instanceof Pawn);\r\n\r\n                                let piece;\r\n                                if (pieces.length > 1) {\r\n                                    piece = this.resolveByCol(\r\n                                        pieces,\r\n                                        move.substring(0, 1)\r\n                                    );\r\n                                } else {\r\n                                    piece = pieces[0];\r\n                                }\r\n\r\n                                if (piece) {\r\n                                    engineFacade.move(MoveUtils.formatSingle(\r\n                                        piece.point,\r\n                                        false\r\n                                    ) + move.substring(move.indexOf('x') + 1) + promotionIndex);\r\n                                } else {\r\n                                }\r\n                            } else {\r\n                                if (/^[A-Z]x[a-z]\\d$/g.test(move)) {\r\n                                    let piece = MoveUtils.findPieceByPossibleCapturesContaining(\r\n                                        move.substring(move.indexOf('x') + 1),\r\n                                        engineFacade.board,\r\n                                        color\r\n                                    ).find(piece => this.resolvePieceByFirstChar(\r\n                                        move.substring(0, 1),\r\n                                        piece\r\n                                    ));\r\n                                    if (piece) {\r\n                                        engineFacade.move(MoveUtils.formatSingle(\r\n                                            piece.point,\r\n                                            false\r\n                                        ) + move.substring(move.indexOf('x') + 1) + promotionIndex);\r\n                                    } else {\r\n                                    }\r\n                                } else {\r\n                                    if (move === 'O-O-O') {\r\n                                        engineFacade.move(color === Color.WHITE ? 'e1c1' : 'e8c8');\r\n                                    } else {\r\n                                        if (/^[A-Z]\\dx[a-z]\\d$/g.test(move)) {  //Ngxe4 sytuacja 2 skoczkow pion bicie\r\n                                            let pieces = MoveUtils.findPieceByPossibleCapturesContaining(\r\n                                                move.substring(move.indexOf('x') + 1),\r\n                                                engineFacade.board,\r\n                                                color\r\n                                            ).filter(piece => this.resolvePieceByFirstChar(\r\n                                                move.charAt(0),\r\n                                                piece\r\n                                            ));\r\n\r\n                                            let piece = this.resolveByRow(\r\n                                                pieces,\r\n                                                move.substring(1, 2)\r\n                                            );\r\n\r\n                                            if (piece) {\r\n                                                engineFacade.move(MoveUtils.formatSingle(\r\n                                                    piece.point,\r\n                                                    false\r\n                                                ) + move.substring(move.indexOf(\r\n                                                    'x') + 1) + promotionIndex);\r\n                                            }\r\n                                        } else {\r\n                                            if (/^[A-Z][a-z][a-z]\\d$/g.test(move)) { // dwie wieze bez bicia Rac1 pion\r\n                                                let pieces = MoveUtils.findPieceByPossibleMovesContaining(\r\n                                                    move.substring(2, 4),\r\n                                                    engineFacade.board,\r\n                                                    color\r\n                                                ).filter(piece => this.resolvePieceByFirstChar(\r\n                                                    move.charAt(0),\r\n                                                    piece\r\n                                                ));\r\n\r\n                                                let piece = this.resolveByCol(\r\n                                                    pieces,\r\n                                                    move.substring(1, 2)\r\n                                                );\r\n\r\n                                                if (piece) {\r\n                                                    engineFacade.move(MoveUtils.formatSingle(\r\n                                                        piece.point,\r\n                                                        false\r\n                                                    ) + move.substring(\r\n                                                        2,\r\n                                                        4\r\n                                                    ) + promotionIndex);\r\n                                                }\r\n                                            } else {\r\n                                                if (/^[A-Z][a-z]x[a-z]\\d$/g.test(\r\n                                                    move)) {\r\n                                                    let pieces = MoveUtils.findPieceByPossibleCapturesContaining(\r\n                                                        move.substring(move.indexOf(\r\n                                                            'x') + 1),\r\n                                                        engineFacade.board,\r\n                                                        color\r\n                                                    ).filter(piece => this.resolvePieceByFirstChar(\r\n                                                        move.charAt(0),\r\n                                                        piece\r\n                                                    ));\r\n\r\n                                                    let piece = this.resolveByCol(\r\n                                                        pieces,\r\n                                                        move.substring(1, 2)\r\n                                                    );\r\n\r\n                                                    if (piece) {\r\n                                                        engineFacade.move(\r\n                                                            MoveUtils.formatSingle(\r\n                                                                piece.point,\r\n                                                                false\r\n                                                            ) + move.substring(\r\n                                                            move.indexOf(\r\n                                                                'x') + 1) + promotionIndex);\r\n                                                    }\r\n                                                } else {\r\n                                                    this.processR1f2(\r\n                                                        move,\r\n                                                        engineFacade,\r\n                                                        color,\r\n                                                        promotionIndex\r\n                                                    );\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private processR1f2(move, engineFacade, color, promotionIndex) {\r\n        if (/^[A-Z]\\d[a-z]\\d$/g.test(move)) { // R1f2\r\n            let pieces = MoveUtils.findPieceByPossibleMovesContaining(\r\n                move.substring(2, 4),\r\n                engineFacade.board,\r\n                color\r\n            ).filter(piece => this.resolvePieceByFirstChar(\r\n                move.charAt(0),\r\n                piece\r\n            ));\r\n\r\n            let piece = this.resolveByRow(\r\n                pieces,\r\n                move.substring(1, 2)\r\n            );\r\n\r\n            if (piece) {\r\n                engineFacade.move(MoveUtils.formatSingle(\r\n                    piece.point,\r\n                    false\r\n                ) + move.substring(\r\n                    2,\r\n                    4\r\n                ) + promotionIndex);\r\n            }\r\n        }\r\n    }\r\n\r\n    protected extractMoves(notation: string) {\r\n        return notation.substring(notation.lastIndexOf(']') + 1)\r\n            .replace(/[0-9]+\\./g, '')\r\n            .replace(/\\s+/g, ' ')\r\n            .replace(/{[^}]*}/g, '')\r\n            .trim()\r\n            .split(' ')\r\n            .filter(s => s);\r\n    }\r\n\r\n    protected movePiece(piece: Piece, board: Board, move: string) {\r\n        let indexes = MoveUtils.translateCoordsToIndex(move, board.reverted);\r\n        piece.point.col = indexes.xAxis;\r\n        piece.point.row = indexes.yAxis;\r\n    }\r\n\r\n    hasUpperCase(move: string) {\r\n        return /[A-Z]/.test(move);\r\n    }\r\n\r\n    private resolvePieceByFirstChar(move: string, piece: Piece) {\r\n        let piecesFirstChar = '';\r\n        if (piece instanceof King) {\r\n            piecesFirstChar = 'K';\r\n        } else {\r\n            if (piece instanceof Queen) {\r\n                piecesFirstChar = 'Q';\r\n            } else {\r\n                if (piece instanceof Rook) {\r\n                    piecesFirstChar = 'R';\r\n                } else {\r\n                    if (piece instanceof Bishop) {\r\n                        piecesFirstChar = 'B';\r\n                    } else {\r\n                        if (piece instanceof Knight) {\r\n                            piecesFirstChar = 'N';\r\n                        } else {\r\n                            if (piece instanceof Pawn) {\r\n                                piecesFirstChar = 'P';\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return move === piecesFirstChar;\r\n    }\r\n\r\n    private isShortCastle(move: string) {\r\n        return move === 'O-O';\r\n    }\r\n\r\n    private removePiece(coords: string, board: Board) {\r\n        let indexes = MoveUtils.translateCoordsToIndex(coords, board.reverted);\r\n\r\n        board.pieces = board.pieces.filter(e => !e.point.isEqual(new Point(\r\n            indexes.yAxis,\r\n            indexes.xAxis\r\n        )));\r\n    }\r\n\r\n    private isLongCastle(move: string) {\r\n        return move === 'O-O-O';\r\n    }\r\n\r\n    private resolveByCol(pieces: Piece[], char: string): Piece {\r\n        let firstPieceFormat = MoveUtils.formatSingle(pieces[0].point, false);\r\n        let secondPieceFormat = MoveUtils.formatSingle(pieces[1].point, false);\r\n        return firstPieceFormat.substring(0, 1) === char\r\n            ? pieces[0]\r\n            : pieces[1];\r\n    }\r\n\r\n    private resolveByRow(pieces: Piece[], char: string) {\r\n        let firstPieceFormat = MoveUtils.formatSingle(pieces[0].point, false);\r\n        let secondPieceFormat = MoveUtils.formatSingle(pieces[1].point, false);\r\n        return firstPieceFormat.substring(1, 2) === char\r\n            ? pieces[0]\r\n            : pieces[1];\r\n    }\r\n\r\n    private replacePromotion(move: string) {\r\n        return move\r\n            .replace('=Q', '1')\r\n            .replace('=R', '2')\r\n            .replace('=B', '3')\r\n            .replace('=K', '4');\r\n    }\r\n\r\n    private resolvePromotion(promotionChar: string) {\r\n        switch (promotionChar) {\r\n            case 'Q':\r\n                return '1';\r\n            case 'R':\r\n                return '2';\r\n            case 'B':\r\n                return '3';\r\n            case 'N':\r\n                return '4';\r\n        }\r\n        return '';\r\n    }\r\n}\r\n","import { NotationProcessor } from './notation-processor';\r\nimport {\r\n    DefaultFenProcessor,\r\n} from './fen-loader/default-fen-processor';\r\nimport { DefaultPgnProcessor } from './pgn-loader/default-pgn-processor';\r\n\r\nexport class NotationProcessorFactory {\r\n\r\n    static getProcessor(type: NotationType): NotationProcessor {\r\n        switch (type) {\r\n            case NotationType.FEN:\r\n                return new DefaultFenProcessor();\r\n\r\n            case NotationType.PGN:\r\n                return new DefaultPgnProcessor();\r\n\r\n        }\r\n    }\r\n\r\n    static getDefaultProcessor(): NotationProcessor {\r\n        return new DefaultFenProcessor();\r\n    }\r\n\r\n}\r\n\r\nexport enum NotationType {\r\n    FEN = 1,\r\n    PGN = 2\r\n}\r\n","import { Board } from '../../../models/board';\r\nimport { Bishop } from '../../../models/pieces/bishop';\r\nimport { Color } from '../../../models/pieces/color';\r\nimport { King } from '../../../models/pieces/king';\r\nimport { Knight } from '../../../models/pieces/knight';\r\nimport { Pawn } from '../../../models/pieces/pawn';\r\nimport { Point } from '../../../models/pieces/point';\r\nimport { Queen } from '../../../models/pieces/queen';\r\nimport { Rook } from '../../../models/pieces/rook';\r\nimport { UnicodeConstants } from '../../../utils/unicode-constants';\r\nimport { AbstractEngineFacade } from '../../abstract-engine-facade';\r\nimport { DefaultPiecesLoader } from './default-pieces-loader';\r\nimport { NotationProcessor } from './notation-processors/notation-processor';\r\nimport { NotationProcessorFactory } from './notation-processors/notation-processor-factory';\r\n\r\nexport class BoardLoader {\r\n\r\n    private engineFacade: AbstractEngineFacade;\r\n    private notationProcessor: NotationProcessor;\r\n\r\n    constructor(engineFacade: AbstractEngineFacade, notationProcessor?: NotationProcessor) {\r\n        this.engineFacade = engineFacade;\r\n\r\n        if (notationProcessor) {\r\n            this.notationProcessor = notationProcessor;\r\n        } else {\r\n            this.notationProcessor = NotationProcessorFactory.getDefaultProcessor();\r\n        }\r\n\r\n    }\r\n\r\n    addPieces() {\r\n        DefaultPiecesLoader.loadDefaultPieces(this.engineFacade.board);\r\n    }\r\n\r\n    loadFEN(fen: string) {\r\n        this.notationProcessor.process(fen, this.engineFacade);\r\n    }\r\n\r\n    loadPGN(pgn: string) {\r\n        this.notationProcessor.process(pgn, this.engineFacade)\r\n    }\r\n\r\n    setEngineFacade(engineFacade: AbstractEngineFacade) {\r\n        this.engineFacade = engineFacade;\r\n    }\r\n\r\n    setNotationProcessor(notationProcessor: NotationProcessor) {\r\n        this.notationProcessor = notationProcessor;\r\n    }\r\n\r\n}\r\n","export class DrawPoint {\r\n    x: number;\r\n    y: number;\r\n    color: string;\r\n\r\n    constructor(x: number, y: number, color: string) {\r\n        this.x = x + 0.5;\r\n        this.y = y + 0.5;\r\n        this.color = color;\r\n    }\r\n\r\n    isEqual(that: DrawPoint) {\r\n        return that && that.x === this.x && this.y === that.y;\r\n    }\r\n}\r\n","import { Point } from '../../models/pieces/point';\r\nimport { ColorStrategy } from '../drawing-tools/colors/color-strategy';\r\nimport { DrawPoint } from '../drawing-tools/draw-point';\r\n\r\nexport class ClickUtils {\r\n\r\n    static getClickPoint(\r\n        event: any,\r\n        top: number,\r\n        height: number,\r\n        left: number,\r\n        width: number\r\n    ) {\r\n        return new Point(\r\n            Math.floor((event.y - top) / (height / 8)),\r\n            Math.floor((event.x - left) / (width / 8)\r\n            )\r\n        );\r\n    }\r\n\r\n    static getDrawingPoint(\r\n        tileSize: number,\r\n        colorStrategy: ColorStrategy,\r\n        x: number,\r\n        y: number,\r\n        ctrl: boolean,\r\n        alt: boolean,\r\n        shift: boolean,\r\n        xAxis: number,\r\n        yAxis: number\r\n    ) {\r\n        const squareSize = tileSize / 8;\r\n        const xx = Math.floor(\r\n            (x - xAxis) /\r\n            squareSize\r\n        );\r\n        const yy = Math.floor(\r\n            (y - yAxis) /\r\n            squareSize\r\n        );\r\n\r\n        let color = colorStrategy.resolve(ctrl, shift, alt);\r\n\r\n        return new DrawPoint(\r\n            Math.floor(xx * squareSize + squareSize / 2),\r\n            Math.floor(yy * squareSize + squareSize / 2),\r\n            color\r\n        );\r\n    }\r\n\r\n}\r\n","export class HistoryMove {\r\n    move: string;\r\n    piece: string;\r\n    color: string;\r\n    x: boolean;\r\n    check: boolean;\r\n    stalemate: boolean;\r\n    mate: boolean;\r\n\r\n    constructor(move: string, piece: string, color: string, captured: boolean) {\r\n        this.move = move;\r\n        this.piece = piece;\r\n        this.color = color;\r\n        this.x = captured;\r\n    }\r\n\r\n    setGameStates(check: boolean, stalemate: boolean, mate: boolean): void {\r\n        this.check = check;\r\n        this.stalemate = stalemate;\r\n        this.mate = mate;\r\n    }\r\n\r\n}\r\n","import { BehaviorSubject } from 'rxjs';\r\nimport { HistoryMove } from './history-move';\r\n\r\nexport class HistoryMoveProvider {\r\n    historyMovesSubject$ = new BehaviorSubject<HistoryMove[]>([]);\r\n\r\n    get historyMoves(): HistoryMove[] {\r\n        return this.historyMovesSubject$.value;\r\n    }\r\n\r\n    set historyMoves(states: HistoryMove[]) {\r\n        this.historyMovesSubject$.next(states);\r\n    }\r\n\r\n    addMove(historyMove: HistoryMove) {\r\n        this.historyMoves = [...this.historyMoves, historyMove];\r\n    }\r\n\r\n    pop(): HistoryMove {\r\n        const lastHistoryMove = this.getLastMove();\r\n        this.historyMoves = this.historyMoves.filter(\r\n            (state) => state !== lastHistoryMove\r\n        );\r\n        return lastHistoryMove;\r\n    }\r\n\r\n    getAll() {\r\n        return this.historyMoves;\r\n    }\r\n\r\n    clear() {\r\n        this.historyMoves = [];\r\n    }\r\n\r\n    getLastMove() {\r\n        return this.historyMoves[this.getLastMoveIndex()];\r\n    }\r\n\r\n    getLastMoveIndex() {\r\n        return this.historyMoves.length - 1;\r\n    }\r\n}\r\n","export class Constants {\r\n    static readonly DEFAULT_DARK_TILE_COLOR = 'rgb(97, 84, 61)';\r\n    static readonly DEFAULT_LIGHT_TILE_COLOR = '#BAA378';\r\n\r\n    static readonly DEFAULT_SIZE = 500;\r\n    static readonly MIN_BOARD_SIZE = 100;\r\n    static readonly MAX_BOARD_SIZE = 4000;\r\n\r\n    static readonly DEFAULT_SOURCE_POINT_COLOR = 'rgba(146, 111, 26, 0.79)';\r\n    static readonly DEFAULT_DESTINATION_POINT_COLOR = '#b28e1a';\r\n    static readonly DEFAULT_LEGAL_MOVE_POINT_COLOR = 'radial-gradient(#13262F 15%, transparent 20%);';\r\n\r\n}\r\n","import { Bishop } from '../../models/pieces/bishop';\r\nimport { Color } from '../../models/pieces/color';\r\nimport { King } from '../../models/pieces/king';\r\nimport { Knight } from '../../models/pieces/knight';\r\nimport { Pawn } from '../../models/pieces/pawn';\r\nimport { Piece } from '../../models/pieces/piece';\r\nimport { Queen } from '../../models/pieces/queen';\r\nimport { Rook } from '../../models/pieces/rook';\r\nimport { PieceIconInput } from './piece-icon-input';\r\n\r\nexport class PieceIconInputManager {\r\n\r\n    private _defaultIcons: boolean = false;\r\n    private _pieceIconInput: PieceIconInput;\r\n\r\n    get pieceIconInput(): PieceIconInput {\r\n        return this._pieceIconInput;\r\n    }\r\n\r\n    set pieceIconInput(value: PieceIconInput) {\r\n        this._pieceIconInput = value;\r\n    }\r\n\r\n\r\n    get defaultIcons(): boolean {\r\n        return this._defaultIcons;\r\n    }\r\n\r\n    set defaultIcons(value: boolean) {\r\n        this._defaultIcons = value;\r\n    }\r\n\r\n    isDefaultIcons(): boolean {\r\n        return this.pieceIconInput === undefined || this.pieceIconInput === null;\r\n    }\r\n\r\n    getPieceIcon(piece: Piece): string {\r\n        let isWhite = (piece.color === Color.WHITE);\r\n        switch (piece.constructor) {\r\n            case King:\r\n                return isWhite ? this.pieceIconInput.whiteKingUrl : this.pieceIconInput.blackKingUrl;\r\n            case Queen:\r\n                return isWhite ? this.pieceIconInput.whiteQueenUrl : this.pieceIconInput.blackQueenUrl;\r\n            case Rook:\r\n                return isWhite ? this.pieceIconInput.whiteRookUrl : this.pieceIconInput.blackRookUrl;\r\n            case Bishop:\r\n                return isWhite ? this.pieceIconInput.whiteBishopUrl : this.pieceIconInput.blackBishopUrl;\r\n            case Knight:\r\n                return isWhite ? this.pieceIconInput.whiteKnightUrl : this.pieceIconInput.blackKnightUrl;\r\n            case Pawn:\r\n                return isWhite ? this.pieceIconInput.whitePawnUrl : this.pieceIconInput.blackPawnUrl;\r\n        }\r\n    }\r\n\r\n    loadDefaultData(){\r\n        this.pieceIconInput = {\r\n            blackBishopUrl: '',\r\n            blackKingUrl: '',\r\n            blackKnightUrl: '',\r\n            blackQueenUrl: '',\r\n            blackRookUrl: '',\r\n            whiteBishopUrl: '',\r\n            whiteKingUrl: '',\r\n            whiteKnightUrl: '',\r\n            whitePawnUrl: '',\r\n            whiteQueenUrl: '',\r\n            whiteRookUrl: '',\r\n            blackPawnUrl: 'a'\r\n        }\r\n    }\r\n\r\n}\r\n","export class CoordsProvider {\r\n    private readonly defaultXCoords: string[] = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'];\r\n\r\n    private readonly defaultYCoords: number[] = [8, 7, 6, 5, 4, 3, 2, 1];\r\n\r\n    private currentXCoords: string[] = [...this.defaultXCoords];\r\n    private currentYCoords: number[] = [...this.defaultYCoords];\r\n\r\n    get xCoords(): string[] {\r\n        return this.currentXCoords;\r\n    }\r\n\r\n    get yCoords(): number[] {\r\n        return this.currentYCoords;\r\n    }\r\n\r\n    reverse() {\r\n        this.currentXCoords = this.currentXCoords.reverse();\r\n        this.currentYCoords = this.currentYCoords.reverse();\r\n    }\r\n\r\n    reset() {\r\n        this.init();\r\n    }\r\n\r\n    private init() {\r\n        this.currentXCoords = [...this.defaultXCoords];\r\n        this.currentYCoords = [...this.defaultYCoords];\r\n    }\r\n}\r\n","import { CdkDragEnd, CdkDragStart } from '@angular/cdk/drag-drop';\r\nimport { DragEndProcessor } from './drag-end-processor';\r\n\r\nexport class AnimationDragEndProcessor implements DragEndProcessor {\r\n\r\n    dragEnded(event: CdkDragEnd, disabling: boolean, startTrans: string) {\r\n        if (!disabling) {\r\n            if (startTrans) {\r\n                event.source._dragRef.getRootElement().style.transform = startTrans;\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n","import { CdkDragEnd } from '@angular/cdk/drag-drop';\r\nimport { AnimationDragEndProcessor } from './animation-drag-end-processor';\r\nimport { DefaultDragEndProcessor } from './default-drag-end-processor';\r\nimport { DragEndProcessor } from './drag-end-processor';\r\n\r\nexport class DragEndStrategy {\r\n\r\n    private dragEndProcessor: DragEndProcessor;\r\n\r\n    constructor() {\r\n        this.dragEndProcessor = new AnimationDragEndProcessor();\r\n    }\r\n\r\n    public process(event: CdkDragEnd, disabling: boolean, startTrans: string): void {\r\n        this.dragEndProcessor.dragEnded(event, disabling, startTrans);\r\n    }\r\n\r\n    setDragEndProcessor(processor: DragEndProcessor) {\r\n        this.dragEndProcessor = processor;\r\n    }\r\n\r\n}\r\n","import { CdkDragStart } from '@angular/cdk/drag-drop';\r\nimport { DragStartProcessor } from './drag-start-processor';\r\n\r\nexport class AnimationDragStartProcessor implements DragStartProcessor {\r\n\r\n    dragStarted(event: CdkDragStart) {\r\n        const style = event.source.getRootElement().style;\r\n        style.zIndex = '1000';\r\n        style.position = 'absolute';\r\n    }\r\n\r\n}\r\n","import { CdkDragStart } from '@angular/cdk/drag-drop';\r\nimport { AnimationDragStartProcessor } from './animation-drag-start-processor';\r\nimport { DefaultDragStartProcessor } from './default-drag-start-processor';\r\nimport { DragStartProcessor } from './drag-start-processor';\r\n\r\nexport class DragStartStrategy {\r\n\r\n    private dragStartProcessor: DragStartProcessor;\r\n\r\n    constructor() {\r\n        this.dragStartProcessor = new AnimationDragStartProcessor();\r\n    }\r\n\r\n    public process(event: CdkDragStart): void {\r\n        this.dragStartProcessor.dragStarted(event);\r\n    }\r\n\r\n    setDragStartProcessor(processor: DragStartProcessor) {\r\n        this.dragStartProcessor = processor;\r\n    }\r\n\r\n}\r\n","import { ColorProcessor } from './color-processor';\r\n\r\nexport class DefaultColorProcessor implements ColorProcessor{\r\n\r\n    resolve(ctrl: any, shift: any, alt: any): string{\r\n        let color = 'green';\r\n\r\n        if (ctrl || shift) {\r\n            color = 'red';\r\n        }\r\n        if (alt) {\r\n            color = 'blue';\r\n        }\r\n        if ((shift || ctrl) && alt) {\r\n            color = 'orange';\r\n        }\r\n\r\n        return color;\r\n    }\r\n\r\n}\r\n","import { ColorProcessor } from './color-processor';\r\nimport { DefaultColorProcessor } from './default-color-processor';\r\n\r\nexport class ColorStrategy {\r\n\r\n    colorProcessor: ColorProcessor;\r\n\r\n    constructor() {\r\n        this.colorProcessor = new DefaultColorProcessor();\r\n    }\r\n\r\n    resolve(ctrl: any, shift: any, alt: any) {\r\n        return this.colorProcessor.resolve(ctrl, shift, alt);\r\n    }\r\n\r\n    setColorProcessor(colorProcessor: ColorProcessor) {\r\n        this.colorProcessor = colorProcessor;\r\n    }\r\n\r\n}\r\n","import { BehaviorSubject } from 'rxjs';\r\nimport { Arrow } from './shapes/arrow';\r\nimport { Circle } from './shapes/circle';\r\n\r\nexport class DrawProvider {\r\n    private arrowsSubject$ = new BehaviorSubject<Arrow[]>([]);\r\n    private circlesSubject$ = new BehaviorSubject<Circle[]>([]);\r\n\r\n    public arrows$ = this.arrowsSubject$.asObservable();\r\n    public circles$ = this.circlesSubject$.asObservable();\r\n\r\n    private get circles(): Circle[] {\r\n        return this.circlesSubject$.value;\r\n    }\r\n\r\n    private set circles(circles: Circle[]) {\r\n        this.circlesSubject$.next(circles);\r\n    }\r\n\r\n    private get arrows(): Arrow[] {\r\n        return this.arrowsSubject$.value;\r\n    }\r\n\r\n    private set arrows(arrows: Arrow[]) {\r\n        this.arrowsSubject$.next(arrows);\r\n    }\r\n\r\n    addCircle(circle: Circle) {\r\n        this.circles = [...this.circles, circle];\r\n    }\r\n\r\n    reomveCircle(removeCircle: Circle) {\r\n        this.circles = this.circles.filter((circle) => !circle.isEqual(removeCircle));\r\n    }\r\n\r\n    addArrow(arrow: Arrow) {\r\n        this.arrows = [...this.arrows, arrow];\r\n    }\r\n\r\n    removeArrow(removeArrow: Arrow) {\r\n        this.arrows = this.arrows.filter((arrow) => !arrow.isEqual(removeArrow));\r\n    }\r\n\r\n    containsCircle(checkCircle: Circle) {\r\n        return this.circles.some((circle) => circle.isEqual(checkCircle));\r\n    }\r\n\r\n    containsArrow(checkArrow: Arrow) {\r\n        return this.arrows.some((arrow: Arrow) => arrow.isEqual(checkArrow));\r\n    }\r\n\r\n    clear() {\r\n        this.arrows = [];\r\n        this.circles = [];\r\n    }\r\n}\r\n","import { Board } from '../../models/board';\r\nimport { Piece } from '../../models/pieces/piece';\r\nimport { Point } from '../../models/pieces/point';\r\n\r\nexport abstract class AbstractPgnProcessor {\r\n\r\n    protected pgn = [];\r\n    protected currentIndex = 0.5;\r\n\r\n    public abstract process(\r\n        board: Board,\r\n        sourcePiece: Piece,\r\n        destPoint: Point,\r\n        destPiece?: Piece\r\n    ): void;\r\n\r\n    public getPGN() {\r\n        return this.pgn.join(' ');\r\n    }\r\n\r\n    protected getLast() {\r\n        return this.pgn[this.pgn.length - 1];\r\n    }\r\n\r\n    protected appendToLast(str: string) {\r\n        this.pgn[this.pgn.length - 1] = this.getLast() + str;\r\n    }\r\n\r\n    processChecks(checkmate: boolean, check: boolean, stalemate: boolean) {\r\n        if (checkmate) {\r\n            this.appendToLast('#');\r\n        } else {\r\n            if (check) {\r\n                this.appendToLast('+');\r\n            }\r\n        }\r\n    }\r\n\r\n    reset() {\r\n        this.pgn = [];\r\n        this.currentIndex = 0.5;\r\n    }\r\n\r\n    addPromotionChoice(promotion) {\r\n        switch (promotion) {\r\n            case 1:\r\n                this.appendToLast('=Q');\r\n                break;\r\n            case 2:\r\n                this.appendToLast('=R');\r\n                break;\r\n            case 3:\r\n                this.appendToLast('=B');\r\n                break;\r\n            case 4:\r\n                this.appendToLast('=N');\r\n                break;\r\n        }\r\n    }\r\n\r\n    removeLast() {\r\n        this.pgn.pop();\r\n        this.currentIndex -= 0.5;\r\n    }\r\n\r\n}\r\n","import { Board } from '../../models/board';\r\nimport { King } from '../../models/pieces/king';\r\nimport { Pawn } from '../../models/pieces/pawn';\r\nimport { Piece } from '../../models/pieces/piece';\r\nimport { Point } from '../../models/pieces/point';\r\nimport { MoveUtils } from '../../utils/move-utils';\r\nimport { AbstractPgnProcessor } from './abstract-pgn-processor';\r\n\r\nexport class DefaultPgnProcessor extends AbstractPgnProcessor {\r\n\r\n    public process(\r\n        board: Board,\r\n        sourcePiece: Piece,\r\n        destPoint: Point,\r\n        destPiece?: Piece\r\n    ): void {\r\n        this.currentIndex += 0.5;\r\n        let currentMove = '';\r\n        if(this.currentIndex % Math.floor(this.currentIndex) === 0) {\r\n            currentMove = this.currentIndex + '. ';\r\n        }\r\n        let possibleCaptures = [];\r\n        let possibleMoves = [];\r\n\r\n        if (destPiece) {\r\n            possibleCaptures = MoveUtils.findPieceByPossibleCapturesContaining(\r\n                MoveUtils.formatSingle(destPoint, board.reverted),\r\n                board,\r\n                sourcePiece.color\r\n            ).filter(piece => piece.constructor.name === sourcePiece.constructor.name);\r\n        }\r\n        possibleMoves = MoveUtils.findPieceByPossibleMovesContaining(\r\n            MoveUtils.formatSingle(destPoint, board.reverted),\r\n            board,\r\n            sourcePiece.color\r\n        ).filter(piece => piece.constructor.name === sourcePiece.constructor.name);\r\n\r\n        if (sourcePiece instanceof Pawn && !destPiece && possibleCaptures.length === 0) {\r\n            currentMove += MoveUtils.formatSingle(destPoint, board.reverted);\r\n        } else {\r\n            if (sourcePiece instanceof Pawn && destPiece) {\r\n                currentMove += (MoveUtils.formatSingle(\r\n                    sourcePiece.point,\r\n                    board.reverted\r\n                ).substring(0, 1) + 'x' + MoveUtils.formatSingle(\r\n                    destPoint,\r\n                    board.reverted\r\n                ));\r\n            } else {\r\n                if (sourcePiece instanceof King && (Math.abs(sourcePiece.point.col - destPoint.col) === 2)) {\r\n                    if (board.reverted) {\r\n                        currentMove += (destPoint.col < 2\r\n                            ? 'O-O'\r\n                            : 'O-O-O');\r\n                    } else {\r\n                        currentMove += destPoint.col < 3\r\n                            ? 'O-O-O'\r\n                            : 'O-O';\r\n                    }\r\n                } else {\r\n                    if (!(sourcePiece instanceof Pawn) && possibleCaptures.length === 0 && possibleMoves.length < 2) {     // Nf3\r\n                        currentMove += MoveUtils.getFirstLetterPiece(sourcePiece) + MoveUtils.formatSingle(\r\n                            destPoint,\r\n                            board.reverted\r\n                        );\r\n                    } else {\r\n                        if (possibleMoves && possibleMoves.length === 2 && possibleCaptures.length === 0) {    // Nbd7\r\n                            if (this.isEqualByCol(\r\n                                possibleMoves[0],\r\n                                possibleMoves[1]\r\n                            )) {\r\n                                currentMove +=  MoveUtils.getFirstLetterPiece(\r\n                                    sourcePiece) + MoveUtils.reverse(\r\n                                    board,\r\n                                    sourcePiece.point.row\r\n                                ) + MoveUtils.formatSingle(\r\n                                    destPoint,\r\n                                    board.reverted\r\n                                );\r\n                            } else {\r\n                                currentMove += MoveUtils.getFirstLetterPiece(\r\n                                    sourcePiece) + MoveUtils.formatCol(\r\n                                    board,\r\n                                    sourcePiece.point.col\r\n                                ) + MoveUtils.formatSingle(\r\n                                    destPoint,\r\n                                    board.reverted\r\n                                );\r\n                            }\r\n                        } else {\r\n                            if (possibleCaptures.length > 1) {\r\n                                if ((this.isEqualByCol(\r\n                                    possibleCaptures[0],\r\n                                    possibleCaptures[1]\r\n                                ))) {\r\n                                    currentMove += MoveUtils.getFirstLetterPiece(\r\n                                        sourcePiece) + MoveUtils.reverse(\r\n                                        board,\r\n                                        sourcePiece.point.row\r\n                                    ) + 'x' + MoveUtils.formatSingle(\r\n                                        destPoint,\r\n                                        board.reverted\r\n                                    );\r\n                                } else {\r\n                                    currentMove += MoveUtils.getFirstLetterPiece(\r\n                                        sourcePiece) + MoveUtils.formatCol(\r\n                                        board,\r\n                                        sourcePiece.point.col\r\n                                    ) + 'x' + MoveUtils.formatSingle(\r\n                                        destPoint,\r\n                                        board.reverted\r\n                                    );\r\n                                }\r\n                            } else {\r\n                                currentMove += MoveUtils.getFirstLetterPiece(\r\n                                    sourcePiece) + 'x' + MoveUtils.formatSingle(\r\n                                    destPoint, board.reverted\r\n                                );\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        this.pgn.push(currentMove);\r\n    }\r\n\r\n    private resolvePieceByFirstChar(move: string, piece: Piece) {\r\n        return MoveUtils.getFirstLetterPiece(piece) === move;\r\n    }\r\n\r\n    private isEqualByCol(aPiece: Piece, bPiece: Piece) {\r\n        return aPiece.point.col === bPiece.point.col;\r\n    }\r\n\r\n}\r\n","import { PiecePromotionModalComponent } from '../piece-promotion/piece-promotion-modal/piece-promotion-modal.component';\r\nimport { HistoryMove } from '../history-move-provider/history-move';\r\nimport { HistoryMoveProvider } from '../history-move-provider/history-move-provider';\r\nimport { Board } from '../models/board';\r\nimport { King } from '../models/pieces/king';\r\nimport { Pawn } from '../models/pieces/pawn';\r\nimport { Piece } from '../models/pieces/piece';\r\nimport { Point } from '../models/pieces/point';\r\nimport { Rook } from '../models/pieces/rook';\r\nimport { Constants } from '../utils/constants';\r\nimport { PieceIconInputManager } from '../utils/inputs/piece-icon-input-manager';\r\nimport { ColorInput, PieceTypeInput } from '../utils/inputs/piece-type-input';\r\nimport { BoardLoader } from './board-state-provider/board-loader/board-loader';\r\nimport { CoordsProvider } from './coords/coords-provider';\r\nimport { DragEndStrategy } from './drag/end/drag-end-strategy';\r\nimport { DragStartStrategy } from './drag/start/drag-start-strategy';\r\nimport { ColorStrategy } from './drawing-tools/colors/color-strategy';\r\nimport { DrawProvider } from './drawing-tools/draw-provider';\r\nimport { DefaultPgnProcessor } from './pgn/default-pgn-processor';\r\nimport { AbstractPgnProcessor } from './pgn/abstract-pgn-processor';\r\n\r\nexport abstract class AbstractEngineFacade {\r\n\r\n    public dragStartStrategy: DragStartStrategy = new DragStartStrategy();\r\n    public dragEndStrategy: DragEndStrategy = new DragEndStrategy();\r\n    public pgnProcessor: AbstractPgnProcessor = new DefaultPgnProcessor();\r\n    protected colorStrategy: ColorStrategy = new ColorStrategy();\r\n\r\n    public coords: CoordsProvider = new CoordsProvider();\r\n    public heightAndWidth: number = Constants.DEFAULT_SIZE;\r\n\r\n    public freeMode = false;\r\n    public dragDisabled: boolean;\r\n    public drawDisabled: boolean;\r\n    public lightDisabled: boolean;\r\n    public darkDisabled: boolean;\r\n    public board: Board;\r\n    public modal: PiecePromotionModalComponent;\r\n    public boardLoader: BoardLoader;\r\n    public drawProvider: DrawProvider = new DrawProvider();\r\n    public pieceIconManager: PieceIconInputManager = new PieceIconInputManager();\r\n    public moveHistoryProvider: HistoryMoveProvider = new HistoryMoveProvider();\r\n    public moveDone: boolean;\r\n    public disabling = false;\r\n\r\n    protected constructor(board: Board) {\r\n        this.board = board;\r\n    }\r\n\r\n    public abstract reset(): void;\r\n\r\n    public abstract undo(): void;\r\n\r\n    public abstract move(coords: string): void;\r\n\r\n    public abstract addPiece(\r\n        pieceTypeInput: PieceTypeInput,\r\n        colorInput: ColorInput,\r\n        coords: string\r\n    ): void;\r\n\r\n    public abstract onMouseUp(\r\n        event: MouseEvent,\r\n        pointClicked: Point,\r\n        left: number,\r\n        top: number\r\n    ): void;\r\n\r\n    public abstract onMouseDown(\r\n        event: MouseEvent,\r\n        pointClicked: Point,\r\n        left?: number,\r\n        top?: number\r\n    ): void;\r\n\r\n    public abstract onContextMenu(\r\n        event: MouseEvent,\r\n    ): void;\r\n\r\n    public checkIfPawnFirstMove(piece: Piece) {\r\n        if (piece instanceof Pawn) {\r\n            piece.isMovedAlready = true;\r\n        }\r\n    }\r\n\r\n    public checkIfRookMoved(piece: Piece) {\r\n        if (piece instanceof Rook) {\r\n            piece.isMovedAlready = true;\r\n        }\r\n    }\r\n\r\n    public checkIfKingMoved(piece: Piece) {\r\n        if (piece instanceof King) {\r\n            piece.isMovedAlready = true;\r\n        }\r\n    }\r\n\r\n    public getMoveHistory(): HistoryMove[] {\r\n        return this.moveHistoryProvider.getAll();\r\n    }\r\n\r\n}\r\n","import { Board } from '../../../models/board';\r\n\r\nexport class BoardState {\r\n\r\n    board: Board;\r\n\r\n    constructor(board: Board) {\r\n        this.board = board;\r\n    }\r\n\r\n}\r\n","import { BehaviorSubject } from 'rxjs';\r\nimport { BoardState } from './board-state';\r\n\r\nexport class BoardStateProvider {\r\n    statesSubject$ = new BehaviorSubject<BoardState[]>([]);\r\n\r\n    get states(): BoardState[] {\r\n        return this.statesSubject$.value;\r\n    }\r\n\r\n    set states(states: BoardState[]) {\r\n        this.statesSubject$.next(states);\r\n    }\r\n\r\n    addMove(state: BoardState) {\r\n        this.states = [...this.states, state];\r\n    }\r\n\r\n    getStates(): BoardState[] {\r\n        return this.states;\r\n    }\r\n\r\n    pop(): BoardState {\r\n        const lastState = this.getLastState();\r\n        this.states = this.states.filter((state) => state !== lastState);\r\n        return lastState;\r\n    }\r\n\r\n    isEmpty() {\r\n        return this.states.length === 0;\r\n    }\r\n\r\n    clear() {\r\n        this.states = [];\r\n    }\r\n\r\n    getLastState() {\r\n        return this.states[this.getLastStateIndex()];\r\n    }\r\n\r\n    getLastStateIndex(): number {\r\n        return this.states.length - 1;\r\n    }\r\n}\r\n","import { DrawPoint } from '../draw-point';\r\n\r\nexport class Arrow {\r\n    start: DrawPoint;\r\n    end: DrawPoint;\r\n\r\n    isEqual(arrow: Arrow) {\r\n        return arrow && this.start.isEqual(arrow.start) && this.end.isEqual(arrow.end);\r\n    }\r\n}\r\n","import { DrawPoint } from '../draw-point';\r\n\r\nexport class Circle {\r\n    drawPoint: DrawPoint;\r\n\r\n    isEqual(circle: Circle) {\r\n        return circle && this.drawPoint.isEqual(circle.drawPoint);\r\n    }\r\n}\r\n","import { Point } from '../../models/pieces/point';\r\nimport { AbstractPiece } from './abstract-piece';\r\n\r\nexport abstract class PieceAbstractDecorator implements AbstractPiece {\r\n\r\n    piece: AbstractPiece;\r\n\r\n    protected constructor(piece: AbstractPiece) {\r\n        this.piece = piece;\r\n    }\r\n\r\n    abstract getPossibleCaptures(): Point[];\r\n\r\n    abstract getPossibleMoves(): Point[];\r\n\r\n}\r\n","import { Board } from '../../models/board';\r\nimport { Color } from '../../models/pieces/color';\r\nimport { Point } from '../../models/pieces/point';\r\nimport { MoveUtils } from '../../utils/move-utils';\r\nimport { AbstractPiece } from './abstract-piece';\r\nimport { PieceAbstractDecorator } from './piece-abstract-decorator';\r\n\r\nexport class AvailableMoveDecorator extends PieceAbstractDecorator {\r\n    private pointClicked: Point;\r\n    private color: Color;\r\n    private board: Board;\r\n\r\n    constructor(piece: AbstractPiece, pointClicked: Point, color: Color, board: Board) {\r\n        super(piece);\r\n        this.pointClicked = pointClicked;\r\n        this.color = color;\r\n        this.board = board;\r\n    }\r\n\r\n    getPossibleCaptures(): Point[] {\r\n        return this.piece\r\n            .getPossibleCaptures()\r\n            .filter(\r\n                (point) =>\r\n                    !MoveUtils.willMoveCauseCheck(\r\n                        this.color,\r\n                        this.pointClicked.row,\r\n                        this.pointClicked.col,\r\n                        point.row,\r\n                        point.col,\r\n                        this.board\r\n                    )\r\n            );\r\n    }\r\n\r\n    getPossibleMoves(): Point[] {\r\n        return this.piece\r\n            .getPossibleMoves()\r\n            .filter(\r\n                (point) =>\r\n                    !MoveUtils.willMoveCauseCheck(\r\n                        this.color,\r\n                        this.pointClicked.row,\r\n                        this.pointClicked.col,\r\n                        point.row,\r\n                        point.col,\r\n                        this.board\r\n                    )\r\n            );\r\n    }\r\n}\r\n","import { Board } from '../models/board';\r\nimport { Bishop } from '../models/pieces/bishop';\r\nimport { Color } from '../models/pieces/color';\r\nimport { Knight } from '../models/pieces/knight';\r\nimport { Piece } from '../models/pieces/piece';\r\nimport { Queen } from '../models/pieces/queen';\r\nimport { Rook } from '../models/pieces/rook';\r\nimport { UnicodeConstants } from '../utils/unicode-constants';\r\n\r\nexport class PiecePromotionResolver {\r\n\r\n    static resolvePromotionChoice(board: Board, piece: Piece, index: number) {\r\n        const isWhite = piece.color === Color.WHITE;\r\n        switch (index) {\r\n            case 1:\r\n                board.pieces.push(\r\n                    new Queen(\r\n                        piece.point,\r\n                        piece.color,\r\n                        isWhite\r\n                            ? UnicodeConstants.WHITE_QUEEN\r\n                            : UnicodeConstants.BLACK_QUEEN,\r\n                        board\r\n                    )\r\n                );\r\n                break;\r\n            case 2:\r\n                board.pieces.push(\r\n                    new Rook(\r\n                        piece.point,\r\n                        piece.color,\r\n                        isWhite\r\n                            ? UnicodeConstants.WHITE_ROOK\r\n                            : UnicodeConstants.BLACK_ROOK,\r\n                        board\r\n                    )\r\n                );\r\n                break;\r\n            case 3:\r\n                board.pieces.push(\r\n                    new Bishop(\r\n                        piece.point,\r\n                        piece.color,\r\n                        isWhite\r\n                            ? UnicodeConstants.WHITE_BISHOP\r\n                            : UnicodeConstants.BLACK_BISHOP,\r\n                        board\r\n                    )\r\n                );\r\n                break;\r\n            case 4:\r\n                board.pieces.push(\r\n                    new Knight(\r\n                        piece.point,\r\n                        piece.color,\r\n                        isWhite\r\n                            ? UnicodeConstants.WHITE_KNIGHT\r\n                            : UnicodeConstants.BLACK_KNIGHT,\r\n                        board\r\n                    )\r\n                );\r\n                break;\r\n        }\r\n    }\r\n\r\n}\r\n","export enum PieceTypeInput {\r\n\r\n    KING = 1,\r\n    QUEEN = 2,\r\n    BISHOP = 3,\r\n    KNIGHT = 4,\r\n    ROOK = 5,\r\n    PAWN = 6\r\n\r\n}\r\n\r\nexport enum ColorInput {\r\n\r\n    LIGHT = 1,\r\n    DARK = 2\r\n\r\n}\r\n","import { Board } from '../../models/board';\r\nimport { MoveTranslation } from '../../models/move-translation';\r\nimport { Bishop } from '../../models/pieces/bishop';\r\nimport { Color } from '../../models/pieces/color';\r\nimport { King } from '../../models/pieces/king';\r\nimport { Knight } from '../../models/pieces/knight';\r\nimport { Pawn } from '../../models/pieces/pawn';\r\nimport { Piece } from '../../models/pieces/piece';\r\nimport { Point } from '../../models/pieces/point';\r\nimport { Queen } from '../../models/pieces/queen';\r\nimport { Rook } from '../../models/pieces/rook';\r\nimport {\r\n    ColorInput,\r\n    PieceTypeInput\r\n} from '../../utils/inputs/piece-type-input';\r\nimport { UnicodeConstants } from '../../utils/unicode-constants';\r\n\r\nexport class PieceFactory {\r\n\r\n    static create(\r\n        indexes: MoveTranslation,\r\n        pieceTypeInput: PieceTypeInput,\r\n        colorInput: ColorInput,\r\n        board: Board\r\n    ): Piece {\r\n        let piece;\r\n        let color = colorInput === ColorInput.LIGHT\r\n            ? Color.WHITE\r\n            : Color.BLACK;\r\n\r\n        switch (pieceTypeInput) {\r\n            case PieceTypeInput.QUEEN:\r\n                piece = new Queen(\r\n                    new Point(indexes.yAxis, indexes.xAxis),\r\n                    color,\r\n                    color === Color.WHITE ? UnicodeConstants.WHITE_QUEEN : UnicodeConstants.BLACK_QUEEN,\r\n                    board\r\n                );\r\n                break;\r\n            case PieceTypeInput.KING:\r\n                piece = new King(\r\n                    new Point(indexes.yAxis, indexes.xAxis),\r\n                    color,\r\n                    color === Color.WHITE ? UnicodeConstants.WHITE_KING : UnicodeConstants.BLACK_KING,\r\n                    board\r\n                );\r\n\r\n                break;\r\n            case PieceTypeInput.KNIGHT:\r\n                piece = new Knight(\r\n                    new Point(indexes.yAxis, indexes.xAxis),\r\n                    color,\r\n                    color === Color.WHITE ? UnicodeConstants.WHITE_KNIGHT : UnicodeConstants.BLACK_KNIGHT,\r\n                    board\r\n                );\r\n                break;\r\n            case PieceTypeInput.BISHOP:\r\n                piece = new Bishop(\r\n                    new Point(indexes.yAxis, indexes.xAxis),\r\n                    color,\r\n                    color === Color.WHITE ? UnicodeConstants.WHITE_BISHOP : UnicodeConstants.BLACK_BISHOP,\r\n                    board\r\n                );\r\n                break;\r\n            case PieceTypeInput.ROOK:\r\n                piece = new Rook(\r\n                    new Point(indexes.yAxis, indexes.xAxis),\r\n                    color,\r\n                    color === Color.WHITE ? UnicodeConstants.WHITE_ROOK : UnicodeConstants.BLACK_ROOK,\r\n                    board\r\n                );\r\n                break;\r\n            case PieceTypeInput.PAWN:\r\n                piece = new Pawn(\r\n                    new Point(indexes.yAxis, indexes.xAxis),\r\n                    color,\r\n                    color === Color.WHITE ? UnicodeConstants.WHITE_PAWN : UnicodeConstants.BLACK_PAWN,\r\n                    board\r\n                );\r\n                break;\r\n        }\r\n\r\n        return piece;\r\n    }\r\n}\r\n","import { EventEmitter } from '@angular/core';\r\nimport { HistoryMove } from '../history-move-provider/history-move';\r\nimport { ColorInput, PieceTypeInput } from '../utils/inputs/piece-type-input';\r\nimport { AbstractEngineFacade } from './abstract-engine-facade';\r\n\r\nimport { BoardLoader } from './board-state-provider/board-loader/board-loader';\r\nimport { BoardState } from './board-state-provider/board-state/board-state';\r\nimport { BoardStateProvider } from './board-state-provider/board-state/board-state-provider';\r\nimport { MoveStateProvider } from './board-state-provider/board-state/move-state-provider';\r\nimport { ClickUtils } from './click/click-utils';\r\nimport { Arrow } from './drawing-tools/shapes/arrow';\r\nimport { Circle } from './drawing-tools/shapes/circle';\r\nimport { DrawPoint } from './drawing-tools/draw-point';\r\nimport { DrawProvider } from './drawing-tools/draw-provider';\r\nimport { Board } from '../models/board';\r\nimport { Color } from '../models/pieces/color';\r\nimport { King } from '../models/pieces/king';\r\nimport { Pawn } from '../models/pieces/pawn';\r\nimport { Piece } from '../models/pieces/piece';\r\nimport { Point } from '../models/pieces/point';\r\nimport { AvailableMoveDecorator } from './piece-decorator/available-move-decorator';\r\nimport { PiecePromotionResolver } from '../piece-promotion/piece-promotion-resolver';\r\nimport { MoveUtils } from '../utils/move-utils';\r\nimport { MoveChange } from './outputs/move-change/move-change';\r\nimport { PieceFactory } from './utils/piece-factory';\r\n\r\nexport class EngineFacade extends AbstractEngineFacade {\r\n\r\n    _selected = false;\r\n    drawPoint: DrawPoint;\r\n    drawProvider: DrawProvider;\r\n    boardStateProvider: BoardStateProvider;\r\n    moveStateProvider: MoveStateProvider;\r\n    moveChange: EventEmitter<MoveChange>;\r\n\r\n    private historyMoveCandidate: HistoryMove;\r\n\r\n    constructor(\r\n        board: Board,\r\n        moveChange: EventEmitter<MoveChange>\r\n    ) {\r\n        super(board);\r\n        this.moveChange = moveChange;\r\n        this.boardLoader = new BoardLoader(this);\r\n        this.boardLoader.addPieces();\r\n        this.boardStateProvider = new BoardStateProvider();\r\n    }\r\n\r\n    public reset(): void {\r\n        this.boardStateProvider.clear();\r\n        this.moveHistoryProvider.clear();\r\n        this.boardLoader.addPieces();\r\n        this.board.reset();\r\n        this.coords.reset();\r\n        this.drawProvider.clear();\r\n        this.pgnProcessor.reset();\r\n    }\r\n\r\n    public undo(): void {\r\n        if (!this.boardStateProvider.isEmpty()) {\r\n            const lastBoard = this.boardStateProvider.pop().board;\r\n            if (this.board.reverted) {\r\n                lastBoard.reverse();\r\n            }\r\n            this.board = lastBoard;\r\n            this.board.possibleCaptures = [];\r\n            this.board.possibleMoves = [];\r\n            this.board.activePiece = null;\r\n            this.moveHistoryProvider.pop();\r\n            this.board.calculateFEN();\r\n            this.pgnProcessor.removeLast();\r\n        }\r\n    }\r\n\r\n    saveMoveClone() {\r\n        const clone = this.board.clone();\r\n\r\n        if (this.board.reverted) {\r\n            clone.reverse();\r\n        }\r\n        this.moveStateProvider.addMove(new BoardState(clone));\r\n    }\r\n\r\n    public move(coords: string) {\r\n        if (coords) {\r\n            const sourceIndexes = MoveUtils.translateCoordsToIndex(\r\n                coords.substring(0, 2),\r\n                this.board.reverted\r\n            );\r\n\r\n            const destIndexes = MoveUtils.translateCoordsToIndex(\r\n                coords.substring(2, 4),\r\n                this.board.reverted\r\n            );\r\n\r\n            const srcPiece = this.board.getPieceByPoint(\r\n                sourceIndexes.yAxis,\r\n                sourceIndexes.xAxis\r\n            );\r\n\r\n            if (srcPiece) {\r\n                if (\r\n                    (this.board.currentWhitePlayer &&\r\n                        srcPiece.color === Color.BLACK) ||\r\n                    (!this.board.currentWhitePlayer &&\r\n                        srcPiece.color === Color.WHITE)\r\n                ) {\r\n                    return;\r\n                }\r\n\r\n                this.prepareActivePiece(srcPiece, srcPiece.point);\r\n\r\n                if (\r\n                    this.board.isPointInPossibleMoves(\r\n                        new Point(destIndexes.yAxis, destIndexes.xAxis)\r\n                    ) ||\r\n                    this.board.isPointInPossibleCaptures(\r\n                        new Point(destIndexes.yAxis, destIndexes.xAxis)\r\n                    )\r\n                ) {\r\n                    this.saveClone();\r\n                    this.movePiece(\r\n                        srcPiece,\r\n                        new Point(destIndexes.yAxis, destIndexes.xAxis),\r\n                        coords.length === 5 ? +coords.substring(4, 5) : 0\r\n                    );\r\n\r\n                    this.board.lastMoveSrc = new Point(\r\n                        sourceIndexes.yAxis,\r\n                        sourceIndexes.xAxis\r\n                    );\r\n                    this.board.lastMoveDest = new Point(\r\n                        destIndexes.yAxis,\r\n                        destIndexes.xAxis\r\n                    );\r\n\r\n                    this.disableSelection();\r\n                } else {\r\n                    this.disableSelection();\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    prepareActivePiece(pieceClicked: Piece, pointClicked: Point) {\r\n        this.board.activePiece = pieceClicked;\r\n        this._selected = true;\r\n        this.board.possibleCaptures = new AvailableMoveDecorator(\r\n            pieceClicked,\r\n            pointClicked,\r\n            this.board.currentWhitePlayer ? Color.WHITE : Color.BLACK,\r\n            this.board\r\n        ).getPossibleCaptures();\r\n        this.board.possibleMoves = new AvailableMoveDecorator(\r\n            pieceClicked,\r\n            pointClicked,\r\n            this.board.currentWhitePlayer ? Color.WHITE : Color.BLACK,\r\n            this.board\r\n        ).getPossibleMoves();\r\n    }\r\n\r\n    onPieceClicked(pieceClicked, pointClicked) {\r\n        if (\r\n            (this.board.currentWhitePlayer && pieceClicked.color === Color.BLACK) ||\r\n            (!this.board.currentWhitePlayer && pieceClicked.color === Color.WHITE)\r\n        ) {\r\n            return;\r\n        }\r\n\r\n        this.prepareActivePiece(pieceClicked, pointClicked);\r\n    }\r\n\r\n    public handleClickEvent(pointClicked: Point, isMouseDown: boolean) {\r\n        let moving = false;\r\n        if (((\r\n            this.board.isPointInPossibleMoves(pointClicked) ||\r\n            this.board.isPointInPossibleCaptures(pointClicked)\r\n        ) || this.freeMode) && pointClicked.isInRange()) {\r\n            this.saveClone();\r\n            this.board.lastMoveSrc = new Point(\r\n                this.board.activePiece.point.row,\r\n                this.board.activePiece.point.col\r\n            );\r\n            this.board.lastMoveDest = pointClicked.clone();\r\n            this.movePiece(this.board.activePiece, pointClicked);\r\n\r\n            if (!this.board.activePiece.point.isEqual(this.board.lastMoveSrc)) {\r\n                moving = true;\r\n            }\r\n        }\r\n\r\n        if (isMouseDown || moving) {\r\n            this.disableSelection();\r\n        }\r\n        this.disableSelection();\r\n        const pieceClicked = this.board.getPieceByPoint(\r\n            pointClicked.row,\r\n            pointClicked.col\r\n        );\r\n        if (pieceClicked && !moving) {\r\n            this.onFreeMode(pieceClicked);\r\n            this.onPieceClicked(pieceClicked, pointClicked);\r\n        }\r\n    }\r\n\r\n    public onContextMenu(\r\n        event: MouseEvent,\r\n    ): void {\r\n        if (this.board.activePiece) {\r\n            this.disableSelection();\r\n        }\r\n    }\r\n\r\n    onMouseDown(\r\n        event: MouseEvent,\r\n        pointClicked: Point,\r\n        left?: number,\r\n        top?: number\r\n    ) {\r\n        this.moveDone = false;\r\n        if (event.button !== 0) {\r\n            this.drawPoint = ClickUtils.getDrawingPoint(\r\n                this.heightAndWidth,\r\n                this.colorStrategy,\r\n                event.x,\r\n                event.y,\r\n                event.ctrlKey,\r\n                event.altKey,\r\n                event.shiftKey,\r\n                left,\r\n                top\r\n            );\r\n            return;\r\n        }\r\n\r\n        this.drawProvider.clear();\r\n\r\n        if (\r\n            this.board.activePiece &&\r\n            pointClicked.isEqual(this.board.activePiece.point)\r\n        ) {\r\n            this.disabling = true;\r\n            return;\r\n        }\r\n\r\n        const pieceClicked = this.board.getPieceByPoint(\r\n            pointClicked.row,\r\n            pointClicked.col\r\n        );\r\n\r\n        if (this.freeMode) {\r\n            if (pieceClicked) {\r\n                if (event.ctrlKey) {\r\n                    this.board.pieces = this.board.pieces.filter(e => e !== pieceClicked);\r\n                    return;\r\n                }\r\n                this.board.currentWhitePlayer = (pieceClicked.color === Color.WHITE);\r\n            }\r\n        }\r\n\r\n        if (this.isPieceDisabled(pieceClicked)) {\r\n            return;\r\n        }\r\n\r\n        if (this._selected) {\r\n            this.handleClickEvent(pointClicked, true);\r\n        } else {\r\n            if (pieceClicked) {\r\n                this.onFreeMode(pieceClicked);\r\n                this.onPieceClicked(pieceClicked, pointClicked);\r\n            }\r\n        }\r\n    }\r\n\r\n    onMouseUp(\r\n        event: MouseEvent,\r\n        pointClicked: Point,\r\n        left: number,\r\n        top: number\r\n    ) {\r\n        this.moveDone = false;\r\n        if (event.button !== 0) {\r\n            if (!this.drawDisabled && this.drawPoint) {\r\n                this.addDrawPoint(\r\n                    event.x,\r\n                    event.y,\r\n                    event.ctrlKey,\r\n                    event.altKey,\r\n                    event.shiftKey,\r\n                    left,\r\n                    top\r\n                );\r\n                return;\r\n            }\r\n            return;\r\n        }\r\n\r\n        this.drawProvider.clear();\r\n\r\n        if (this.dragDisabled) {\r\n            return;\r\n        }\r\n\r\n        if (\r\n            this.board.activePiece &&\r\n            pointClicked.isEqual(this.board.activePiece.point) &&\r\n            this.disabling\r\n        ) {\r\n            this.disableSelection();\r\n            this.disabling = false;\r\n            return;\r\n        }\r\n        const pieceClicked = this.board.getPieceByPoint(\r\n            pointClicked.row,\r\n            pointClicked.col\r\n        );\r\n\r\n        if (this.isPieceDisabled(pieceClicked)) {\r\n            return;\r\n        }\r\n\r\n        if (this._selected) {\r\n            this.handleClickEvent(pointClicked, false);\r\n            //   this.possibleMoves = activePiece.getPossibleMoves();\r\n        }\r\n    }\r\n\r\n    saveClone() {\r\n        const clone = this.board.clone();\r\n\r\n        if (this.board.reverted) {\r\n            clone.reverse();\r\n        }\r\n        this.boardStateProvider.addMove(new BoardState(clone));\r\n    }\r\n\r\n    movePiece(toMovePiece: Piece, newPoint: Point, promotionIndex?: number) {\r\n        const destPiece = this.board.pieces.find(\r\n            (piece) =>\r\n                piece.point.col === newPoint.col &&\r\n                piece.point.row === newPoint.row\r\n        );\r\n\r\n        this.pgnProcessor.process(\r\n            this.board,\r\n            toMovePiece,\r\n            newPoint,\r\n            destPiece\r\n        );\r\n\r\n        if (destPiece && toMovePiece.color !== destPiece.color) {\r\n            this.board.pieces = this.board.pieces.filter(\r\n                (piece) => piece !== destPiece\r\n            );\r\n        } else {\r\n            if (destPiece && toMovePiece.color === destPiece.color) {\r\n                return;\r\n            }\r\n        }\r\n\r\n        this.historyMoveCandidate = new HistoryMove(\r\n            MoveUtils.format(toMovePiece.point, newPoint, this.board.reverted),\r\n            toMovePiece.constant.name,\r\n            toMovePiece.color === Color.WHITE ? 'white' : 'black',\r\n            !!destPiece\r\n        );\r\n        this.moveHistoryProvider.addMove(this.historyMoveCandidate);\r\n\r\n        if (toMovePiece instanceof King) {\r\n            const squaresMoved = Math.abs(newPoint.col - toMovePiece.point.col);\r\n            if (squaresMoved > 1) {\r\n                if (newPoint.col < 3) {\r\n                    const leftRook = this.board.getPieceByField(\r\n                        toMovePiece.point.row,\r\n                        0\r\n                    );\r\n                    if (!this.freeMode) {\r\n                        leftRook.point.col = this.board.reverted ? 2 : 3;\r\n                    }\r\n                } else {\r\n                    const rightRook = this.board.getPieceByField(\r\n                        toMovePiece.point.row,\r\n                        7\r\n                    );\r\n                    if (!this.freeMode) {\r\n                        rightRook.point.col = this.board.reverted ? 4 : 5;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (toMovePiece instanceof Pawn) {\r\n            this.board.checkIfPawnTakesEnPassant(newPoint);\r\n            this.board.checkIfPawnEnpassanted(toMovePiece, newPoint);\r\n        } else {\r\n            this.board.enPassantPoint = null;\r\n            this.board.enPassantPiece = null;\r\n        }\r\n\r\n        toMovePiece.point = newPoint;\r\n        this.increaseFullMoveCount();\r\n        this.board.currentWhitePlayer = !this.board.currentWhitePlayer;\r\n\r\n        if (!this.checkForPawnPromote(toMovePiece, promotionIndex)) {\r\n            this.afterMoveActions();\r\n        }\r\n    }\r\n\r\n    checkForPawnPromote(toPromotePiece: Piece, promotionIndex?: number) {\r\n        if (!(toPromotePiece instanceof Pawn)) {\r\n            return;\r\n        }\r\n\r\n        if (toPromotePiece.point.row === 0 || toPromotePiece.point.row === 7) {\r\n            this.board.pieces = this.board.pieces.filter(\r\n                (piece) => piece !== toPromotePiece\r\n            );\r\n\r\n            // When we make move manually, we pass promotion index already, so we don't need\r\n            // to acquire it from promote dialog\r\n            if (!promotionIndex) {\r\n                this.openPromoteDialog(toPromotePiece);\r\n            } else {\r\n                PiecePromotionResolver.resolvePromotionChoice(\r\n                    this.board,\r\n                    toPromotePiece,\r\n                    promotionIndex\r\n                );\r\n                this.afterMoveActions(promotionIndex);\r\n            }\r\n\r\n            return true;\r\n        }\r\n    }\r\n\r\n    afterMoveActions(promotionIndex?: number) {\r\n        this.checkIfPawnFirstMove(this.board.activePiece);\r\n        this.checkIfRookMoved(this.board.activePiece);\r\n        this.checkIfKingMoved(this.board.activePiece);\r\n\r\n        this.board.blackKingChecked = this.board.isKingInCheck(\r\n            Color.BLACK,\r\n            this.board.pieces\r\n        );\r\n        this.board.whiteKingChecked = this.board.isKingInCheck(\r\n            Color.WHITE,\r\n            this.board.pieces\r\n        );\r\n        const check =\r\n            this.board.blackKingChecked || this.board.whiteKingChecked;\r\n        const checkmate =\r\n            this.checkForPossibleMoves(Color.BLACK) ||\r\n            this.checkForPossibleMoves(Color.WHITE);\r\n        const stalemate =\r\n            this.checkForPat(Color.BLACK) || this.checkForPat(Color.WHITE);\r\n\r\n        this.historyMoveCandidate.setGameStates(check, stalemate, checkmate);\r\n        this.pgnProcessor.processChecks(checkmate, check, stalemate);\r\n        this.pgnProcessor.addPromotionChoice(promotionIndex);\r\n\r\n        this.disabling = false;\r\n        this.board.calculateFEN();\r\n\r\n        const lastMove = this.moveHistoryProvider.getLastMove();\r\n        if (lastMove && promotionIndex) {\r\n            lastMove.move += promotionIndex;\r\n        }\r\n\r\n        this.moveChange.emit({\r\n            ...lastMove,\r\n            check,\r\n            checkmate,\r\n            stalemate,\r\n            fen: this.board.fen,\r\n            pgn: {\r\n                pgn: this.pgnProcessor.getPGN()\r\n            },\r\n            freeMode: this.freeMode\r\n        });\r\n\r\n        this.moveDone = true;\r\n    }\r\n\r\n    checkForPat(color: Color) {\r\n        if (color === Color.WHITE && !this.board.whiteKingChecked) {\r\n            return this.checkForPossibleMoves(color);\r\n        } else {\r\n            if (color === Color.BLACK && !this.board.blackKingChecked) {\r\n                return this.checkForPossibleMoves(color);\r\n            }\r\n        }\r\n    }\r\n\r\n    openPromoteDialog(piece: Piece) {\r\n        if (piece.color === this.board.activePiece.color) {\r\n            this.modal.open((index) => {\r\n                PiecePromotionResolver.resolvePromotionChoice(\r\n                    this.board,\r\n                    piece,\r\n                    index\r\n                );\r\n                this.afterMoveActions(index);\r\n            });\r\n        }\r\n    }\r\n\r\n    checkForPossibleMoves(color: Color): boolean {\r\n        return !this.board.pieces\r\n            .filter((piece) => piece.color === color)\r\n            .some(\r\n                (piece) =>\r\n                    piece\r\n                        .getPossibleMoves()\r\n                        .some(\r\n                            (move) =>\r\n                                !MoveUtils.willMoveCauseCheck(\r\n                                    color,\r\n                                    piece.point.row,\r\n                                    piece.point.col,\r\n                                    move.row,\r\n                                    move.col,\r\n                                    this.board\r\n                                )\r\n                        ) ||\r\n                    piece\r\n                        .getPossibleCaptures()\r\n                        .some(\r\n                            (capture) =>\r\n                                !MoveUtils.willMoveCauseCheck(\r\n                                    color,\r\n                                    piece.point.row,\r\n                                    piece.point.col,\r\n                                    capture.row,\r\n                                    capture.col,\r\n                                    this.board\r\n                                )\r\n                        )\r\n            );\r\n    }\r\n\r\n    disableSelection() {\r\n        this._selected = false;\r\n        this.board.possibleCaptures = [];\r\n        this.board.activePiece = null;\r\n        this.board.possibleMoves = [];\r\n    }\r\n\r\n    /**\r\n     * Processes logic to allow freeMode based logic processing\r\n     */\r\n    onFreeMode(pieceClicked) {\r\n        if (\r\n            !this.freeMode ||\r\n            pieceClicked === undefined ||\r\n            pieceClicked === null\r\n        ) {\r\n            return;\r\n        }\r\n        // sets player as white in-case white pieces are selected, and vice-versa when black is selected\r\n        this.board.currentWhitePlayer = pieceClicked.color === Color.WHITE;\r\n    }\r\n\r\n    isPieceDisabled(pieceClicked: Piece) {\r\n        if (pieceClicked && pieceClicked.point) {\r\n            const foundCapture = this.board.possibleCaptures.find(\r\n                (capture) =>\r\n                    capture.col === pieceClicked.point.col &&\r\n                    capture.row === pieceClicked.point.row\r\n            );\r\n\r\n            if (foundCapture) {\r\n                return false;\r\n            }\r\n        }\r\n        return (\r\n            pieceClicked &&\r\n            ((this.lightDisabled && pieceClicked.color === Color.WHITE) ||\r\n                (this.darkDisabled && pieceClicked.color === Color.BLACK))\r\n        );\r\n    }\r\n\r\n    addDrawPoint(\r\n        x: number,\r\n        y: number,\r\n        crtl: boolean,\r\n        alt: boolean,\r\n        shift: boolean,\r\n        left: number,\r\n        top: number\r\n    ) {\r\n        const upPoint = ClickUtils.getDrawingPoint(\r\n            this.heightAndWidth,\r\n            this.colorStrategy,\r\n            x,\r\n            y,\r\n            crtl,\r\n            alt,\r\n            shift,\r\n            left,\r\n            top\r\n        );\r\n\r\n        if (this.drawPoint.isEqual(upPoint)) {\r\n            const circle = new Circle();\r\n            circle.drawPoint = upPoint;\r\n            if (!this.drawProvider.containsCircle(circle)) {\r\n                this.drawProvider.addCircle(circle);\r\n            } else {\r\n                this.drawProvider.reomveCircle(circle);\r\n            }\r\n        } else {\r\n            const arrow = new Arrow();\r\n            arrow.start = this.drawPoint;\r\n            arrow.end = upPoint;\r\n\r\n            if (!this.drawProvider.containsArrow(arrow)) {\r\n                this.drawProvider.addArrow(arrow);\r\n            } else {\r\n                this.drawProvider.removeArrow(arrow);\r\n            }\r\n        }\r\n    }\r\n\r\n    increaseFullMoveCount() {\r\n        if (!this.board.currentWhitePlayer) {\r\n            ++this.board.fullMoveCount;\r\n        }\r\n    }\r\n\r\n    addPiece(\r\n        pieceTypeInput: PieceTypeInput,\r\n        colorInput: ColorInput,\r\n        coords: string\r\n    ) {\r\n        if (this.freeMode && coords && pieceTypeInput > 0 && colorInput > 0) {\r\n            let indexes = MoveUtils.translateCoordsToIndex(\r\n                coords,\r\n                this.board.reverted\r\n            );\r\n            let existing = this.board.getPieceByPoint(\r\n                indexes.yAxis,\r\n                indexes.xAxis\r\n            );\r\n            if (existing) {\r\n                this.board.pieces = this.board.pieces.filter(e => e !== existing);\r\n            }\r\n            let createdPiece = PieceFactory.create(\r\n                indexes,\r\n                pieceTypeInput,\r\n                colorInput,\r\n                this.board\r\n            );\r\n            this.saveClone();\r\n            this.board.pieces.push(createdPiece);\r\n            this.afterMoveActions();\r\n        }\r\n    }\r\n}\r\n","import { cloneDeep } from 'lodash';\r\nimport { Bishop } from './pieces/bishop';\r\nimport { Color } from './pieces/color';\r\nimport { King } from './pieces/king';\r\nimport { Knight } from './pieces/knight';\r\nimport { Pawn } from './pieces/pawn';\r\nimport { Piece } from './pieces/piece';\r\nimport { Point } from './pieces/point';\r\nimport { Queen } from './pieces/queen';\r\nimport { Rook } from './pieces/rook';\r\n\r\nexport class Board {\r\n    board: number[][] = [];\r\n    pieces: Piece[] = [];\r\n\r\n    enPassantPoint: Point = null;\r\n    enPassantPiece: Piece = null;\r\n    lastMoveSrc: Point = null;\r\n    lastMoveDest: Point = null;\r\n    activePiece: Piece;\r\n\r\n    blackKingChecked: boolean;\r\n    possibleCaptures: any[] = [];\r\n    possibleMoves: Point[] = [];\r\n    whiteKingChecked: boolean;\r\n\r\n    currentWhitePlayer = true;\r\n    reverted = false;\r\n    fullMoveCount = 1;\r\n    fen: string;\r\n\r\n    constructor() {\r\n        for (let i = 0; i < 8; ++i) {\r\n            this.board[i] = [];\r\n            for (let j = 0; j < 8; ++j) {\r\n                this.board[i][j] = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    isXYInPossibleMoves(row: number, col: number): boolean {\r\n        return this.possibleMoves.some((move) => move.row === row && move.col === col);\r\n    }\r\n\r\n    isXYInPossibleCaptures(row: number, col: number): boolean {\r\n        return this.possibleCaptures.some((capture) => capture.row === row && capture.col === col);\r\n    }\r\n\r\n    isXYInSourceMove(i: number, j: number) {\r\n        return this.lastMoveSrc && this.lastMoveSrc.row === i && this.lastMoveSrc.col === j;\r\n    }\r\n\r\n    isXYInDestMove(i: number, j: number) {\r\n        return this.lastMoveDest && this.lastMoveDest.row === i && this.lastMoveDest.col === j;\r\n    }\r\n\r\n    isXYInActiveMove(i: number, j: number) {\r\n        return this.activePiece && this.activePiece.point.row === i && this.activePiece.point.col === j;\r\n    }\r\n\r\n    isPointInPossibleMoves(point: Point): boolean {\r\n        return this.possibleMoves.some((move) => move.row === point.row && move.col === point.col);\r\n    }\r\n\r\n    isPointInPossibleCaptures(point: Point): boolean {\r\n        return this.possibleCaptures.some((capture) => capture.row === point.row && capture.col === point.col);\r\n    }\r\n\r\n    reset() {\r\n        this.lastMoveDest = null;\r\n        this.lastMoveSrc = null;\r\n        this.whiteKingChecked = false;\r\n        this.blackKingChecked = false;\r\n        this.possibleCaptures = [];\r\n        this.possibleMoves = [];\r\n        this.activePiece = null;\r\n        this.reverted = false;\r\n        this.currentWhitePlayer = true;\r\n        this.enPassantPoint = null;\r\n        this.enPassantPiece = null;\r\n        this.fullMoveCount = 1;\r\n        this.calculateFEN();\r\n    }\r\n\r\n        reverse() {\r\n        this.reverted = !this.reverted;\r\n        this.activePiece = null;\r\n        this.possibleMoves = [];\r\n        this.possibleCaptures = [];\r\n\r\n        this.pieces.forEach((piece: Piece) => this.reversePoint(piece.point));\r\n\r\n        this.reversePoint(this.lastMoveSrc);\r\n        this.reversePoint(this.lastMoveDest);\r\n\r\n        if (this.enPassantPoint && this.enPassantPiece) {\r\n            this.reversePoint(this.enPassantPoint);\r\n        }\r\n    }\r\n\r\n    clone(): Board {\r\n        return cloneDeep(this);\r\n    }\r\n\r\n    isFieldTakenByEnemy(row: number, col: number, enemyColor: Color): boolean {\r\n        if (row > 7 || row < 0 || col > 7 || col < 0) {\r\n            return false;\r\n        }\r\n        return this.pieces.some(\r\n            (piece) => piece.point.col === col && piece.point.row === row && piece.color === enemyColor\r\n        );\r\n    }\r\n\r\n    isFieldEmpty(row: number, col: number): boolean {\r\n        if (row > 7 || row < 0 || col > 7 || col < 0) {\r\n            return false;\r\n        }\r\n        return !this.pieces.some((piece) => piece.point.col === col && piece.point.row === row);\r\n    }\r\n\r\n    isFieldUnderAttack(row: number, col: number, color: Color) {\r\n        return this.pieces\r\n            .filter((piece) => piece.color === color)\r\n            .some((piece) => piece.getCoveredFields().some((field) => field.col === col && field.row === row));\r\n    }\r\n\r\n    getPieceByField(row: number, col: number): Piece {\r\n        if (this.isFieldEmpty(row, col)) {\r\n            //   throw new Error('Piece not found');\r\n            return undefined;\r\n        }\r\n\r\n        return this.pieces.find((piece) => piece.point.col === col && piece.point.row === row);\r\n    }\r\n\r\n    isKingInCheck(color: Color, pieces: Piece[]): boolean {\r\n        const king = pieces.find((piece) => piece.color === color && piece instanceof King);\r\n\r\n        if (king) {\r\n            return pieces.some(\r\n                (piece) =>\r\n                    piece\r\n                        .getPossibleCaptures()\r\n                        .some((point) => point.col === king.point.col && point.row === king.point.row) &&\r\n                    piece.color !== color\r\n            );\r\n        }\r\n        return false;\r\n    }\r\n\r\n    getKingByColor(color: Color): King {\r\n        return this.pieces.find((piece) => piece instanceof King && piece.color === color) as King;\r\n    }\r\n\r\n    getCastleFENString(color: Color) {\r\n        const king = this.getKingByColor(color);\r\n\r\n        if (!king || king.isMovedAlready) {\r\n            return '';\r\n        }\r\n\r\n        let fen = '';\r\n        const leftRook = this.getPieceByField(king.point.row, 0);\r\n        const rightRook = this.getPieceByField(king.point.row, 7);\r\n\r\n        if (rightRook instanceof Rook && rightRook.color === color) {\r\n            if (!rightRook.isMovedAlready) {\r\n                fen += this.reverted ? 'q' : 'k';\r\n            }\r\n        }\r\n\r\n        if (leftRook instanceof Rook && leftRook.color === color) {\r\n            if (!leftRook.isMovedAlready) {\r\n                fen += this.reverted ? 'k' : 'q';\r\n            }\r\n        }\r\n\r\n        fen = fen.split('').sort().join('');\r\n        return color === Color.BLACK ? fen : fen.toUpperCase();\r\n    }\r\n\r\n    getEnPassantFENString() {\r\n        if (this.enPassantPoint) {\r\n            if (this.reverted) {\r\n                return String.fromCharCode(104 - this.enPassantPoint.col) + (this.enPassantPoint.row + 1);\r\n            } else {\r\n                return String.fromCharCode(97 + this.enPassantPoint.col) + (Math.abs(this.enPassantPoint.row - 7) + 1);\r\n            }\r\n        } else {\r\n            return '-';\r\n        }\r\n    }\r\n\r\n    calculateFEN() {\r\n        let fen = '';\r\n        for (let i = 0; i < 8; ++i) {\r\n            let emptyFields = 0;\r\n            for (let j = 0; j < 8; ++j) {\r\n                const foundPiece = this.pieces.find((piece) => piece.point.col === j && piece.point.row === i);\r\n                if (foundPiece) {\r\n                    if (emptyFields > 0) {\r\n                        fen += emptyFields;\r\n                        emptyFields = 0;\r\n                    }\r\n\r\n                    if (foundPiece instanceof Rook) {\r\n                        fen += foundPiece.color === Color.BLACK ? 'r' : 'R';\r\n                    } else {\r\n                        if (foundPiece instanceof Knight) {\r\n                            fen += foundPiece.color === Color.BLACK ? 'n' : 'N';\r\n                        } else {\r\n                            if (foundPiece instanceof Bishop) {\r\n                                fen += foundPiece.color === Color.BLACK ? 'b' : 'B';\r\n                            } else {\r\n                                if (foundPiece instanceof Queen) {\r\n                                    fen += foundPiece.color === Color.BLACK ? 'q' : 'Q';\r\n                                } else {\r\n                                    if (foundPiece instanceof King) {\r\n                                        fen += foundPiece.color === Color.BLACK ? 'k' : 'K';\r\n                                    } else {\r\n                                        if (foundPiece instanceof Pawn) {\r\n                                            fen += foundPiece.color === Color.BLACK ? 'p' : 'P';\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                } else {\r\n                    ++emptyFields;\r\n                }\r\n            }\r\n\r\n            if (emptyFields > 0) {\r\n                fen += emptyFields;\r\n            }\r\n\r\n            fen += '/';\r\n        }\r\n\r\n        fen = fen.substr(0, fen.length - 1);\r\n\r\n        if (this.reverted) {\r\n            fen = fen.split('').reverse().join('');\r\n        }\r\n\r\n        fen += ' ' + (this.currentWhitePlayer ? 'w' : 'b');\r\n        const whiteEnPassant = this.getCastleFENString(Color.WHITE);\r\n        const blackEnPassant = this.getCastleFENString(Color.BLACK);\r\n        let concatedEnPassant = whiteEnPassant + blackEnPassant;\r\n        if (!concatedEnPassant) {\r\n            concatedEnPassant = '-';\r\n        }\r\n\r\n        fen += ' ' + concatedEnPassant;\r\n        fen += ' ' + this.getEnPassantFENString();\r\n        fen += ' ' + 0;\r\n        fen += ' ' + this.fullMoveCount;\r\n        this.fen = fen;\r\n    }\r\n\r\n    isXYInPointSelection(i: number, j: number) {\r\n        return false;\r\n    }\r\n\r\n    private reversePoint(point: Point) {\r\n        if (point) {\r\n            point.row = Math.abs(point.row - 7);\r\n            point.col = Math.abs(point.col - 7);\r\n        }\r\n    }\r\n\r\n    public getPieceByPoint(row: number, col: number): Piece {\r\n        row = Math.floor(row);\r\n        col = Math.floor(col);\r\n        return this.pieces.find(\r\n            (piece) => piece.point.col === col && piece.point.row === row\r\n        );\r\n    }\r\n\r\n    public checkIfPawnTakesEnPassant(newPoint: Point) {\r\n        if (newPoint.isEqual(this.enPassantPoint)) {\r\n            this.pieces = this.pieces.filter(\r\n                (piece) => piece !== this.enPassantPiece\r\n            );\r\n            this.enPassantPoint = null;\r\n            this.enPassantPiece = null;\r\n        }\r\n    }\r\n\r\n    public checkIfPawnEnpassanted(piece: Pawn, newPoint: Point) {\r\n        if (Math.abs(piece.point.row - newPoint.row) > 1) {\r\n            this.enPassantPiece = piece;\r\n            this.enPassantPoint = new Point(\r\n                (piece.point.row + newPoint.row) / 2,\r\n                piece.point.col\r\n            );\r\n        } else {\r\n            this.enPassantPoint = null;\r\n            this.enPassantPiece = null;\r\n        }\r\n    }\r\n\r\n    isKingChecked(piece: Piece) {\r\n        if (piece instanceof King) {\r\n            return piece.color === Color.WHITE\r\n                ? this.whiteKingChecked\r\n                : this.blackKingChecked;\r\n        }\r\n    }\r\n\r\n    getCurrentPlayerColor(): number {\r\n        return this.currentWhitePlayer ? Color.WHITE : Color.BLACK;\r\n    }\r\n}\r\n","<div #myModal class=\"container\">\r\n    <div class=\"wrapper\">\r\n        <div class=\"content\">\r\n            <div class=\"piece-wrapper\" *ngIf=\"pieceIconInput\">\r\n                <div class=\"piece\" (click)=\"changeSelection(1)\">\r\n                    <img [src]=\"getPieceIcon('queen')\" alt=\"Queen\">\r\n                </div>\r\n                <div class=\"piece\" (click)=\"changeSelection(2)\">\r\n                    <img [src]=\"getPieceIcon('rook')\" alt=\"Rook\">\r\n                </div>\r\n                <div class=\"piece\" (click)=\"changeSelection(3)\">\r\n                    <img [src]=\"getPieceIcon('bishop')\" alt=\"Bishop\">\r\n                </div>\r\n                <div class=\"piece\" (click)=\"changeSelection(4)\">\r\n                    <img [src]=\"getPieceIcon('knight')\" alt=\"Knight\">\r\n                </div>\r\n            </div>\r\n            <div class=\"piece-wrapper\" *ngIf=\"!pieceIconInput\">\r\n                <div class=\"piece\" (click)=\"changeSelection(1)\">&#x265B;</div>\r\n                <div class=\"piece\" (click)=\"changeSelection(2)\">&#x265C;</div>\r\n                <div class=\"piece\" (click)=\"changeSelection(3)\">&#x265D;</div>\r\n                <div class=\"piece\" (click)=\"changeSelection(4)\">&#x265E;</div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n","import { Component, ElementRef, Input, ViewChild } from '@angular/core';\r\nimport { PieceIconInput } from '../../utils/inputs/piece-icon-input';\r\n\r\n@Component({\r\n    selector: 'app-piece-promotion-modal',\r\n    templateUrl: './piece-promotion-modal.component.html',\r\n    styleUrls: ['./piece-promotion-modal.component.scss']\r\n})\r\nexport class PiecePromotionModalComponent {\r\n\r\n    @ViewChild('myModal', {static: false}) modal: ElementRef;\r\n\r\n    @Input()\r\n    pieceIconInput: PieceIconInput;\r\n\r\n    @Input()\r\n    color = 'white';\r\n\r\n    opened = false;\r\n    private onCloseCallback: (index: number) => void;\r\n\r\n    open(closeCallback: (index: number) => void) {\r\n        this.opened = true;\r\n        this.onCloseCallback = closeCallback;\r\n        this.modal.nativeElement.style.display = 'block';\r\n    }\r\n\r\n    changeSelection(index: number){\r\n        this.modal.nativeElement.style.display = 'none';\r\n        this.opened = false;\r\n        this.onCloseCallback(index);\r\n    }\r\n\r\n    getPieceIcon(piece: string): string {\r\n        let coloredPiece = '';\r\n        switch (piece.toLowerCase()) {\r\n            case 'queen':\r\n                coloredPiece = this.color === 'white' ? this.pieceIconInput.whiteQueenUrl : this.pieceIconInput.blackQueenUrl;\r\n                break;\r\n            case 'rook':\r\n                coloredPiece = this.color === 'white' ? this.pieceIconInput.whiteRookUrl : this.pieceIconInput.blackRookUrl;\r\n                break;\r\n            case 'bishop':\r\n                coloredPiece = this.color === 'white' ? this.pieceIconInput.whiteBishopUrl : this.pieceIconInput.blackBishopUrl;\r\n                break;\r\n            case 'knight':\r\n                coloredPiece = this.color === 'white' ? this.pieceIconInput.whiteKnightUrl : this.pieceIconInput.blackKnightUrl;\r\n                break;\r\n        }\r\n\r\n        return coloredPiece;\r\n    }\r\n}\r\n","<div\r\n    id=\"board\"\r\n    [style.height.px]=\"engineFacade.heightAndWidth\"\r\n    [style.width.px]=\"engineFacade.heightAndWidth\"\r\n    (contextmenu)=\"!modal.opened && onContextMenu($event)\"\r\n    (pointerdown)=\"!modal.opened && onMouseDown($event)\"\r\n    (pointerup)=\"!modal.opened && onMouseUp($event)\"\r\n    #boardRef\r\n>\r\n    <div id=\"drag\">\r\n        <div\r\n            [cdkDragDisabled]=\"engineFacade.dragDisabled\"\r\n            (cdkDragEnded)=\"dragEnded($event)\"\r\n            (cdkDragMoved)=\"dragMoved($event)\"\r\n            (cdkDragStarted)=\"dragStart($event)\"\r\n            class=\"single-piece\" [innerHTML]=\"engineFacade.pieceIconManager.isDefaultIcons() ? piece.constant.icon : ''\"\r\n            [ngStyle]=\"engineFacade.pieceIconManager.isDefaultIcons() ? '' : getCustomPieceIcons(piece)\"\r\n            [style.transform]=\"'translate3d(' + piece.point.col * pieceSize + 'px, ' + piece.point.row * pieceSize + 'px,0px)'\"\r\n            [style.max-height]=\"pieceSize + 'px'\"\r\n            [style.font-size]=\"pieceSize * 0.8 + 'px'\"\r\n            [style.width]=\"pieceSize + 'px'\"\r\n            [style.height]=\"pieceSize + 'px'\"\r\n            cdkDrag\r\n            [style.--animation-duration]=\"animationDuration + 'ms'\"\r\n            *ngFor=\"let piece of engineFacade.board.pieces; let i = index\"\r\n        >\r\n        </div>\r\n        <div\r\n            class=\"board-row\"\r\n            *ngFor=\"let row of engineFacade.board.board; let i = index\"\r\n        >\r\n            <div\r\n                class=\"board-col\"\r\n                [class.current-selection]=\"showActivePiece && engineFacade.board.isXYInActiveMove(i,j)\"\r\n                [class.king-check]=\" engineFacade.board.isKingChecked(engineFacade.board.getPieceByPoint(i,j))\"\r\n                [class.point-circle]=\"engineFacade.board.isXYInPointSelection(i, j)\"\r\n                [class.possible-capture]=\"showPossibleCaptures && engineFacade.board.isXYInPossibleCaptures(i, j)\"\r\n                [class.possible-point]=\"engineFacade.board.isXYInPossibleMoves(i, j) && showLegalMoves\"\r\n                [style.background-color]=\"getTileBackgroundColor(i, j)\"\r\n                *ngFor=\"let col of row; let j = index\"\r\n            >\r\n                <span\r\n                    class=\"yCoord\"\r\n                    [style.color]=\"(i % 2 === 0) ? lightTileColor : darkTileColor\"\r\n                    [style.font-size.px]=\"pieceSize / 4\"\r\n                    *ngIf=\"showCoords && j === 7\"\r\n                >\r\n                    {{engineFacade.coords.yCoords[i]}}\r\n                </span>\r\n                <span\r\n                    class=\"xCoord\"\r\n                    [style.color]=\"(j % 2 === 0) ? lightTileColor : darkTileColor\"\r\n                    [style.font-size.px]=\"pieceSize / 4\"\r\n                    *ngIf=\"showCoords && i === 7\"\r\n                >\r\n                    {{engineFacade.coords.xCoords[j]}}\r\n                </span>\r\n                <div\r\n                    *ngIf=\"engineFacade.board.getPieceByPoint(i, j) as piece\"\r\n                    style=\"height:100%; width:100%\"\r\n                >\r\n                    <div\r\n                        [ngClass]=\"'piece'\"\r\n                        [style.font-size]=\"pieceSize + 'px'\"\r\n\r\n                    >\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <svg\r\n        [attr.height]=\"engineFacade.heightAndWidth\"\r\n        [attr.width]=\"engineFacade.heightAndWidth\"\r\n        style=\"position:absolute; top:0; pointer-events: none\"\r\n    >\r\n        <defs *ngFor=\"let color of ['red', 'green', 'blue', 'orange']\">\r\n            <marker\r\n                [id]=\"randomId + color + 'Arrow'\"\r\n                markerHeight=\"13\"\r\n                markerWidth=\"13\"\r\n                orient=\"auto\"\r\n                refX=\"9\"\r\n                refY=\"6\"\r\n            >\r\n                <path\r\n                    [style.fill]=\"color\"\r\n                    d=\"M2,2 L2,11 L10,6 L2,2\"\r\n                ></path>\r\n            </marker>\r\n        </defs>\r\n        <line\r\n            class=\"arrow\"\r\n            [attr.marker-end]=\"'url(#' + randomId + arrow.end.color + 'Arrow)'\"\r\n            [attr.stroke]=\"arrow.end.color\"\r\n            [attr.x1]=\"arrow.start.x\"\r\n            [attr.x2]=\"arrow.end.x\"\r\n            [attr.y1]=\"arrow.start.y\"\r\n            [attr.y2]=\"arrow.end.y\"\r\n            *ngFor=\"let arrow of engineFacade.drawProvider.arrows$ | async\"\r\n        ></line>\r\n        <circle\r\n            [attr.cx]=\"circle.drawPoint.x\"\r\n            [attr.cy]=\"circle.drawPoint.y\"\r\n            [attr.r]=\"engineFacade.heightAndWidth / 18\"\r\n            [attr.stroke]=\"circle.drawPoint.color\"\r\n            *ngFor=\"let circle of engineFacade.drawProvider.circles$ | async\"\r\n            fill-opacity=\"0.0\"\r\n            stroke-width=\"2\"\r\n        ></circle>\r\n    </svg>\r\n    <app-piece-promotion-modal #modal\r\n                               [pieceIconInput]=\"engineFacade.pieceIconManager.pieceIconInput\"\r\n                               [color]=\"engineFacade.board.getCurrentPlayerColor() ? 'white' : 'black'\"></app-piece-promotion-modal>\r\n</div>\r\n","import { CdkDragEnd, CdkDragMove, CdkDragStart } from '@angular/cdk/drag-drop';\r\nimport {\r\n    AfterViewInit,\r\n    Component,\r\n    ElementRef,\r\n    EventEmitter,\r\n    HostListener,\r\n    Input,\r\n    OnChanges,\r\n    OnInit,\r\n    Output,\r\n    SimpleChanges,\r\n    ViewChild,\r\n} from '@angular/core';\r\nimport { AbstractEngineFacade } from './engine/abstract-engine-facade';\r\nimport { BoardLoader } from './engine/board-state-provider/board-loader/board-loader';\r\nimport {\r\n    NotationProcessorFactory,\r\n    NotationType,\r\n} from './engine/board-state-provider/board-loader/notation-processors/notation-processor-factory';\r\nimport { ClickUtils } from './engine/click/click-utils';\r\nimport { EngineFacade } from './engine/engine-facade';\r\nimport { MoveChange } from './engine/outputs/move-change/move-change';\r\nimport { HistoryMove } from './history-move-provider/history-move';\r\nimport { Board } from './models/board';\r\nimport { Piece } from './models/pieces/piece';\r\nimport { NgxChessBoardView } from './ngx-chess-board-view';\r\nimport { PiecePromotionModalComponent } from './piece-promotion/piece-promotion-modal/piece-promotion-modal.component';\r\nimport { Constants } from './utils/constants';\r\nimport { PieceIconInput } from './utils/inputs/piece-icon-input';\r\nimport { PieceIconInputManager } from './utils/inputs/piece-icon-input-manager';\r\nimport { ColorInput, PieceTypeInput } from './utils/inputs/piece-type-input';\r\n\r\n@Component({\r\n    selector: 'ngx-chess-board',\r\n    templateUrl: './ngx-chess-board.component.html',\r\n    styleUrls: ['./ngx-chess-board.component.scss'],\r\n})\r\nexport class NgxChessBoardComponent\r\n    implements OnInit, OnChanges, NgxChessBoardView, AfterViewInit {\r\n\r\n    @Input() darkTileColor = Constants.DEFAULT_DARK_TILE_COLOR;\r\n    @Input() lightTileColor: string = Constants.DEFAULT_LIGHT_TILE_COLOR;\r\n    @Input() showCoords = true;\r\n    @Input() sourcePointColor: string = Constants.DEFAULT_SOURCE_POINT_COLOR;\r\n    @Input() destinationPointColor: string = Constants.DEFAULT_DESTINATION_POINT_COLOR;\r\n    @Input() legalMovesPointColor: string = Constants.DEFAULT_LEGAL_MOVE_POINT_COLOR;\r\n    @Input() showLastMove = true;\r\n    @Input() showLegalMoves = true;\r\n    @Input() showActivePiece = true;\r\n    @Input() animationDuration = 200;\r\n    @Input() showPossibleCaptures = true;\r\n    /**\r\n     * Enabling free mode removes turn-based restriction and allows to move any piece freely!\r\n     */\r\n    @Output() moveChange = new EventEmitter<MoveChange>();\r\n    @Output() checkmate = new EventEmitter<void>();\r\n    @Output() stalemate = new EventEmitter<void>();\r\n\r\n    @ViewChild('boardRef')\r\n    boardRef: ElementRef;\r\n    @ViewChild('modal')\r\n    modal: PiecePromotionModalComponent;\r\n\r\n    pieceSize: number;\r\n    selected = false;\r\n    boardLoader: BoardLoader;\r\n    pieceIconManager: PieceIconInputManager;\r\n    isDragging = false;\r\n    startTransition = '';\r\n\r\n    engineFacade: AbstractEngineFacade;\r\n\r\n    randomId = (Math.random() + 1).toString(36).substring(7);\r\n\r\n    constructor() {\r\n        this.engineFacade = new EngineFacade(\r\n            new Board(),\r\n            this.moveChange\r\n        );\r\n    }\r\n\r\n    @Input('size')\r\n    public set size(size: number) {\r\n        if (\r\n            size &&\r\n            size >= Constants.MIN_BOARD_SIZE &&\r\n            size <= Constants.MAX_BOARD_SIZE\r\n        ) {\r\n            this.engineFacade.heightAndWidth = size;\r\n        } else {\r\n            this.engineFacade.heightAndWidth = Constants.DEFAULT_SIZE;\r\n        }\r\n        this.engineFacade.drawProvider.clear();\r\n        this.calculatePieceSize();\r\n    }\r\n\r\n    @Input('freeMode')\r\n    public set freeMode(freeMode: boolean) {\r\n        this.engineFacade.freeMode = freeMode;\r\n    }\r\n\r\n    @Input('dragDisabled')\r\n    public set dragDisabled(dragDisabled: boolean) {\r\n        this.engineFacade.dragDisabled = dragDisabled;\r\n    }\r\n\r\n    @Input('drawDisabled')\r\n    public set drawDisabled(drawDisabled: boolean) {\r\n        this.engineFacade.drawDisabled = drawDisabled;\r\n    }\r\n\r\n    @Input('pieceIcons')\r\n    public set pieceIcons(pieceIcons: PieceIconInput) {\r\n        this.engineFacade.pieceIconManager.pieceIconInput = pieceIcons;\r\n    }\r\n\r\n    @Input('lightDisabled')\r\n    public set lightDisabled(lightDisabled: boolean) {\r\n        this.engineFacade.lightDisabled = lightDisabled;\r\n    }\r\n\r\n    @Input('darkDisabled')\r\n    public set darkDisabled(darkDisabled: boolean) {\r\n        this.engineFacade.darkDisabled = darkDisabled;\r\n    }\r\n\r\n    @HostListener('contextmenu', ['$event'])\r\n    onRightClick(event: MouseEvent) {\r\n        event.preventDefault();\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (\r\n            (changes.lightDisabled &&\r\n                this.lightDisabled &&\r\n                this.engineFacade.board.currentWhitePlayer) ||\r\n            (changes.darkDisabled &&\r\n                this.darkDisabled &&\r\n                !this.engineFacade.board.currentWhitePlayer)\r\n        ) {\r\n            this.engineFacade.board.possibleCaptures = [];\r\n            this.engineFacade.board.possibleMoves = [];\r\n        }\r\n    }\r\n\r\n    ngOnInit() {}\r\n\r\n    ngAfterViewInit(): void {\r\n        this.engineFacade.modal = this.modal;\r\n        this.calculatePieceSize();\r\n    }\r\n\r\n    onMouseUp(event: MouseEvent) {\r\n        this.engineFacade.onMouseUp(\r\n            event,\r\n            this.getClickPoint(event),\r\n            this.boardRef.nativeElement.getBoundingClientRect().left,\r\n            this.boardRef.nativeElement.getBoundingClientRect().top\r\n        );\r\n    }\r\n\r\n    reverse(): void {\r\n        this.selected = false;\r\n        this.engineFacade.board.reverse();\r\n        this.engineFacade.coords.reverse();\r\n    }\r\n\r\n    updateBoard = (board: Board) => {\r\n        this.engineFacade.board = board;\r\n        this.engineFacade.board.possibleCaptures = [];\r\n        this.engineFacade.board.possibleMoves = [];\r\n        this.boardLoader = new BoardLoader(this.engineFacade);\r\n        this.boardLoader.setEngineFacade(this.engineFacade);\r\n    };\r\n\r\n    setFEN(fen: string): void {\r\n        try {\r\n            this.engineFacade.boardLoader.setNotationProcessor(\r\n                NotationProcessorFactory.getProcessor(NotationType.FEN)\r\n            );\r\n            this.engineFacade.boardLoader.loadFEN(fen);\r\n            this.engineFacade.board.possibleCaptures = [];\r\n            this.engineFacade.board.possibleMoves = [];\r\n            this.engineFacade.coords.reset();\r\n        } catch (exception) {\r\n            this.engineFacade.boardLoader.addPieces();\r\n        }\r\n    }\r\n\r\n    setPGN(pgn: string): void {\r\n        try {\r\n            this.engineFacade.pgnProcessor.reset();\r\n            this.engineFacade.boardLoader.setNotationProcessor(\r\n                NotationProcessorFactory.getProcessor(NotationType.PGN)\r\n            );\r\n            this.engineFacade.boardLoader.loadPGN(pgn);\r\n            this.engineFacade.board.possibleCaptures = [];\r\n            this.engineFacade.board.possibleMoves = [];\r\n            this.engineFacade.coords.reset();\r\n        } catch (exception) {\r\n            console.log(exception);\r\n            this.engineFacade.boardLoader.addPieces();\r\n        }\r\n    }\r\n\r\n    getFEN(): string {\r\n        return this.engineFacade.board.fen;\r\n    }\r\n\r\n    dragEnded(event: CdkDragEnd): void {\r\n        this.isDragging = false;\r\n        this.engineFacade.dragEndStrategy.process(\r\n            event,\r\n            this.engineFacade.moveDone,\r\n            this.startTransition\r\n        );\r\n    }\r\n\r\n    dragStart(event: CdkDragStart): void {\r\n        this.isDragging = true;\r\n        let trans = event.source.getRootElement().style.transform.split(') ');\r\n        //   this.startTrans= trans;\r\n        this.startTransition = trans.length === 2 ? trans[1] : trans[0];\r\n        this.engineFacade.dragStartStrategy.process(event);\r\n    }\r\n\r\n    onMouseDown(event: MouseEvent) {\r\n        this.engineFacade.onMouseDown(event, this.getClickPoint(event),\r\n            this.boardRef.nativeElement.getBoundingClientRect().left,\r\n            this.boardRef.nativeElement.getBoundingClientRect().top\r\n        );\r\n    }\r\n\r\n    onContextMenu(event: MouseEvent): void {\r\n        this.engineFacade.onContextMenu(event);\r\n    }\r\n\r\n    getClickPoint(event) {\r\n        return ClickUtils.getClickPoint(\r\n            event,\r\n            this.boardRef.nativeElement.getBoundingClientRect().top,\r\n            this.boardRef.nativeElement.getBoundingClientRect().height,\r\n            this.boardRef.nativeElement.getBoundingClientRect().left,\r\n            this.boardRef.nativeElement.getBoundingClientRect().width\r\n        );\r\n    }\r\n\r\n    private calculatePieceSize() {\r\n        this.pieceSize = this.engineFacade.heightAndWidth / 8;\r\n    }\r\n\r\n\r\n    getCustomPieceIcons(piece: Piece) {\r\n        return JSON.parse(\r\n            `{ \"background-image\": \"url('${this.engineFacade.pieceIconManager.getPieceIcon(\r\n                piece\r\n            )}')\"}`\r\n        );\r\n    }\r\n\r\n    move(coords: string): void {\r\n        this.engineFacade.move(coords);\r\n    }\r\n\r\n    getMoveHistory(): HistoryMove[] {\r\n        return this.engineFacade.getMoveHistory();\r\n    }\r\n\r\n    reset(): void {\r\n        this.engineFacade.reset();\r\n    }\r\n\r\n    undo(): void {\r\n        this.engineFacade.undo();\r\n    }\r\n\r\n    addPiece(\r\n        pieceTypeInput: PieceTypeInput,\r\n        colorInput: ColorInput,\r\n        coords: string\r\n    ) {\r\n        this.engineFacade.addPiece(pieceTypeInput, colorInput, coords);\r\n    }\r\n\r\n    getPGN() {\r\n        return this.engineFacade.pgnProcessor.getPGN();\r\n    }\r\n\r\n    dragMoved($event: CdkDragMove<any>) {\r\n        let x = ($event.pointerPosition.x - $event.source.getRootElement().parentElement.getBoundingClientRect().left) - (this.pieceSize / 2);\r\n        let y = ($event.pointerPosition.y - $event.source.getRootElement().parentElement.getBoundingClientRect().top) - (this.pieceSize / 2);\r\n        $event.source.getRootElement().style.transform = 'translate3d(' + x + 'px, '\r\n            + (y) + 'px,0px)';\r\n    }\r\n\r\n    getTileBackgroundColor(i, j): string {\r\n        let color = ((i + j) % 2 === 0) ? this.lightTileColor : this.darkTileColor;\r\n\r\n        if (this.showLastMove) {\r\n            if (this.engineFacade.board.isXYInSourceMove(i, j)) {\r\n                color = this.sourcePointColor;\r\n            }\r\n\r\n            if (this.engineFacade.board.isXYInDestMove(i, j)) {\r\n                color = this.destinationPointColor;\r\n            }\r\n        }\r\n\r\n        return color;\r\n    }\r\n}\r\n","import { DragDropModule } from '@angular/cdk/drag-drop';\r\nimport { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { NgxChessBoardComponent } from './ngx-chess-board.component';\r\nimport { PiecePromotionModalComponent } from './piece-promotion/piece-promotion-modal/piece-promotion-modal.component';\r\n\r\n@NgModule({\r\n    declarations: [NgxChessBoardComponent, PiecePromotionModalComponent],\r\n    imports: [CommonModule, DragDropModule],\r\n    exports: [NgxChessBoardComponent],\r\n})\r\nexport class NgxChessBoardModule {}\r\n","/*\r\n * Public API Surface of ngx-chess-board\r\n */\r\n\r\nexport * from './lib/ngx-chess-board.module';\r\nexport * from './lib/history-move-provider/history-move';\r\nexport * from './lib/utils/inputs/piece-icon-input';\r\n\r\nexport * from './lib/utils/inputs/piece-type-input';\r\nexport * from './lib/ngx-chess-board.component';\r\nexport * from './lib/piece-promotion/piece-promotion-modal/piece-promotion-modal.component';\r\n\r\nexport * from './lib/ngx-chess-board-view';\r\nexport * from './lib/models/board';\r\nexport * from './lib/engine/outputs/move-change/move-change'\r\n\r\n/*\r\n * Public API Surface of im-grid\r\n */\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["DefaultPgnProcessor"],"mappings":"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"}