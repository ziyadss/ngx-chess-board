import { PiecePromotionModalComponent } from '../piece-promotion/piece-promotion-modal/piece-promotion-modal.component';
import { HistoryMove } from '../history-move-provider/history-move';
import { HistoryMoveProvider } from '../history-move-provider/history-move-provider';
import { Board } from '../models/board';
import { Piece } from '../models/pieces/piece';
import { Point } from '../models/pieces/point';
import { PieceIconInputManager } from '../utils/inputs/piece-icon-input-manager';
import { ColorInput, PieceTypeInput } from '../utils/inputs/piece-type-input';
import { BoardLoader } from './board-state-provider/board-loader/board-loader';
import { CoordsProvider } from './coords/coords-provider';
import { DragEndStrategy } from './drag/end/drag-end-strategy';
import { DragStartStrategy } from './drag/start/drag-start-strategy';
import { ColorStrategy } from './drawing-tools/colors/color-strategy';
import { DrawProvider } from './drawing-tools/draw-provider';
import { AbstractPgnProcessor } from './pgn/abstract-pgn-processor';
export declare abstract class AbstractEngineFacade {
    dragStartStrategy: DragStartStrategy;
    dragEndStrategy: DragEndStrategy;
    pgnProcessor: AbstractPgnProcessor;
    protected colorStrategy: ColorStrategy;
    coords: CoordsProvider;
    heightAndWidth: number;
    freeMode: boolean;
    dragDisabled: boolean;
    drawDisabled: boolean;
    lightDisabled: boolean;
    darkDisabled: boolean;
    board: Board;
    modal: PiecePromotionModalComponent;
    boardLoader: BoardLoader;
    drawProvider: DrawProvider;
    pieceIconManager: PieceIconInputManager;
    moveHistoryProvider: HistoryMoveProvider;
    moveDone: boolean;
    disabling: boolean;
    protected constructor(board: Board);
    abstract reset(): void;
    abstract undo(): void;
    abstract move(coords: string): void;
    abstract addPiece(pieceTypeInput: PieceTypeInput, colorInput: ColorInput, coords: string): void;
    abstract onMouseUp(event: MouseEvent, pointClicked: Point, left: number, top: number): void;
    abstract onMouseDown(event: MouseEvent, pointClicked: Point, left?: number, top?: number): void;
    abstract onContextMenu(event: MouseEvent): void;
    checkIfPawnFirstMove(piece: Piece): void;
    checkIfRookMoved(piece: Piece): void;
    checkIfKingMoved(piece: Piece): void;
    getMoveHistory(): HistoryMove[];
}
//# sourceMappingURL=abstract-engine-facade.d.ts.map