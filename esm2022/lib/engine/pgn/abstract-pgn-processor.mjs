export class AbstractPgnProcessor {
    constructor() {
        this.pgn = [];
        this.currentIndex = 0.5;
    }
    getPGN() {
        return this.pgn.join(' ');
    }
    getLast() {
        return this.pgn[this.pgn.length - 1];
    }
    appendToLast(str) {
        this.pgn[this.pgn.length - 1] = this.getLast() + str;
    }
    processChecks(checkmate, check, stalemate) {
        if (checkmate) {
            this.appendToLast('#');
        }
        else {
            if (check) {
                this.appendToLast('+');
            }
        }
    }
    reset() {
        this.pgn = [];
        this.currentIndex = 0.5;
    }
    addPromotionChoice(promotion) {
        switch (promotion) {
            case 1:
                this.appendToLast('=Q');
                break;
            case 2:
                this.appendToLast('=R');
                break;
            case 3:
                this.appendToLast('=B');
                break;
            case 4:
                this.appendToLast('=N');
                break;
        }
    }
    removeLast() {
        this.pgn.pop();
        this.currentIndex -= 0.5;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWJzdHJhY3QtcGduLXByb2Nlc3Nvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25neC1jaGVzcy1ib2FyZC9zcmMvbGliL2VuZ2luZS9wZ24vYWJzdHJhY3QtcGduLXByb2Nlc3Nvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFJQSxNQUFNLE9BQWdCLG9CQUFvQjtJQUExQztRQUVjLFFBQUcsR0FBRyxFQUFFLENBQUM7UUFDVCxpQkFBWSxHQUFHLEdBQUcsQ0FBQztJQTBEakMsQ0FBQztJQWpEVSxNQUFNO1FBQ1QsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUM5QixDQUFDO0lBRVMsT0FBTztRQUNiLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztJQUN6QyxDQUFDO0lBRVMsWUFBWSxDQUFDLEdBQVc7UUFDOUIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsT0FBTyxFQUFFLEdBQUcsR0FBRyxDQUFDO0lBQ3pELENBQUM7SUFFRCxhQUFhLENBQUMsU0FBa0IsRUFBRSxLQUFjLEVBQUUsU0FBa0I7UUFDaEUsSUFBSSxTQUFTLEVBQUU7WUFDWCxJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQzFCO2FBQU07WUFDSCxJQUFJLEtBQUssRUFBRTtnQkFDUCxJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxDQUFDO2FBQzFCO1NBQ0o7SUFDTCxDQUFDO0lBRUQsS0FBSztRQUNELElBQUksQ0FBQyxHQUFHLEdBQUcsRUFBRSxDQUFDO1FBQ2QsSUFBSSxDQUFDLFlBQVksR0FBRyxHQUFHLENBQUM7SUFDNUIsQ0FBQztJQUVELGtCQUFrQixDQUFDLFNBQVM7UUFDeEIsUUFBUSxTQUFTLEVBQUU7WUFDZixLQUFLLENBQUM7Z0JBQ0YsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFDeEIsTUFBTTtZQUNWLEtBQUssQ0FBQztnQkFDRixJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUN4QixNQUFNO1lBQ1YsS0FBSyxDQUFDO2dCQUNGLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ3hCLE1BQU07WUFDVixLQUFLLENBQUM7Z0JBQ0YsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFDeEIsTUFBTTtTQUNiO0lBQ0wsQ0FBQztJQUVELFVBQVU7UUFDTixJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQ2YsSUFBSSxDQUFDLFlBQVksSUFBSSxHQUFHLENBQUM7SUFDN0IsQ0FBQztDQUVKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQm9hcmQgfSBmcm9tICcuLi8uLi9tb2RlbHMvYm9hcmQnO1xyXG5pbXBvcnQgeyBQaWVjZSB9IGZyb20gJy4uLy4uL21vZGVscy9waWVjZXMvcGllY2UnO1xyXG5pbXBvcnQgeyBQb2ludCB9IGZyb20gJy4uLy4uL21vZGVscy9waWVjZXMvcG9pbnQnO1xyXG5cclxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEFic3RyYWN0UGduUHJvY2Vzc29yIHtcclxuXHJcbiAgICBwcm90ZWN0ZWQgcGduID0gW107XHJcbiAgICBwcm90ZWN0ZWQgY3VycmVudEluZGV4ID0gMC41O1xyXG5cclxuICAgIHB1YmxpYyBhYnN0cmFjdCBwcm9jZXNzKFxyXG4gICAgICAgIGJvYXJkOiBCb2FyZCxcclxuICAgICAgICBzb3VyY2VQaWVjZTogUGllY2UsXHJcbiAgICAgICAgZGVzdFBvaW50OiBQb2ludCxcclxuICAgICAgICBkZXN0UGllY2U/OiBQaWVjZVxyXG4gICAgKTogdm9pZDtcclxuXHJcbiAgICBwdWJsaWMgZ2V0UEdOKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnBnbi5qb2luKCcgJyk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIGdldExhc3QoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucGduW3RoaXMucGduLmxlbmd0aCAtIDFdO1xyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBhcHBlbmRUb0xhc3Qoc3RyOiBzdHJpbmcpIHtcclxuICAgICAgICB0aGlzLnBnblt0aGlzLnBnbi5sZW5ndGggLSAxXSA9IHRoaXMuZ2V0TGFzdCgpICsgc3RyO1xyXG4gICAgfVxyXG5cclxuICAgIHByb2Nlc3NDaGVja3MoY2hlY2ttYXRlOiBib29sZWFuLCBjaGVjazogYm9vbGVhbiwgc3RhbGVtYXRlOiBib29sZWFuKSB7XHJcbiAgICAgICAgaWYgKGNoZWNrbWF0ZSkge1xyXG4gICAgICAgICAgICB0aGlzLmFwcGVuZFRvTGFzdCgnIycpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlmIChjaGVjaykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hcHBlbmRUb0xhc3QoJysnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXNldCgpIHtcclxuICAgICAgICB0aGlzLnBnbiA9IFtdO1xyXG4gICAgICAgIHRoaXMuY3VycmVudEluZGV4ID0gMC41O1xyXG4gICAgfVxyXG5cclxuICAgIGFkZFByb21vdGlvbkNob2ljZShwcm9tb3Rpb24pIHtcclxuICAgICAgICBzd2l0Y2ggKHByb21vdGlvbikge1xyXG4gICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICB0aGlzLmFwcGVuZFRvTGFzdCgnPVEnKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICB0aGlzLmFwcGVuZFRvTGFzdCgnPVInKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIDM6XHJcbiAgICAgICAgICAgICAgICB0aGlzLmFwcGVuZFRvTGFzdCgnPUInKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIDQ6XHJcbiAgICAgICAgICAgICAgICB0aGlzLmFwcGVuZFRvTGFzdCgnPU4nKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZW1vdmVMYXN0KCkge1xyXG4gICAgICAgIHRoaXMucGduLnBvcCgpO1xyXG4gICAgICAgIHRoaXMuY3VycmVudEluZGV4IC09IDAuNTtcclxuICAgIH1cclxuXHJcbn1cclxuIl19